import os
import json
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from google.oauth2.service_account import Credentials
import gspread
from gspread.exceptions import APIError, SpreadsheetNotFound
from aiohttp import web
import logging

# =============== –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ö–≠–® ===============
CACHE = {}  # –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
CACHE_TIMEOUT = 60 * 10  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

async def get_sheet_data(sheet, force_update=False):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã —Å –∫—ç—à–µ–º"""
    now = datetime.now().timestamp()
    cached_data = CACHE.get(sheet.title, {})
    if not force_update and cached_data.get('expires') > now:
        return cached_data['data']
    
    loop = asyncio.get_event_loop()
    data = await loop.run_in_executor(
        None, 
        lambda: sheet.get_all_values()
    )
    
    CACHE[sheet.title] = {
        'data': data,
        'expires': now + CACHE_TIMEOUT
    }
    return data

async def preload_sheets():
    await get_sheet_data(gamma_cluster_sheet, force_update=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã –∏–∑ orders_spreadsheet
    all_worksheets = orders_spreadsheet.worksheets()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ª–∏—Å—Ç—ã –ø–æ —à–∞–±–ª–æ–Ω—É "–î–∞—Ç—ã –≤—ã—Ö–æ–¥–æ–≤ –∑–∞–∫–∞–∑–æ–≤"
    supplier_sheets = [
        ws.title.replace("–î–∞—Ç—ã –≤—ã—Ö–æ–¥–æ–≤ –∑–∞–∫–∞–∑–æ–≤ ", "")
        for ws in all_worksheets
        if ws.title.startswith("–î–∞—Ç—ã –≤—ã—Ö–æ–¥–æ–≤ –∑–∞–∫–∞–∑–æ–≤")
    ]
    
    for shop in supplier_sheets:
        await get_sheet_data(
            get_supplier_dates_sheet(shop),
            force_update=True
        )

# =============== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===============
from dotenv import load_dotenv
load_dotenv('secret.env')  

try:
    BOT_TOKEN = os.environ['BOT_TOKEN']
    GOOGLE_CREDS_JSON = os.environ['GOOGLE_CREDENTIALS']
except KeyError as e:
    raise RuntimeError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {e}")

GOOGLE_CREDS = json.loads(GOOGLE_CREDS_JSON)
SPREADSHEET_NAME = "ShopBotData"
ORDERS_SPREADSHEET_NAME = "–ö–æ–ø–∏—è –ó–∞–∫–∞–∑—ã –ú–ó 0.2"
USERS_SHEET_NAME = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
GAMMA_CLUSTER_SHEET = "–ì–∞–º–º–∞ –∫–ª–∞—Å—Ç–µ—Ä"
LOGS_SHEET = "–õ–æ–≥–∏"

WEBHOOK_HOST = os.getenv('WEBHOOK_HOST')
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# =============== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===============
credentials = Credentials.from_service_account_info(
    GOOGLE_CREDS,
    scopes=['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
)
client = gspread.authorize(credentials)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
try:
    main_spreadsheet = client.open(SPREADSHEET_NAME)
    users_sheet = main_spreadsheet.worksheet(USERS_SHEET_NAME)
    logs_sheet = main_spreadsheet.worksheet(LOGS_SHEET)
    orders_spreadsheet = client.open(ORDERS_SPREADSHEET_NAME)
    gamma_cluster_sheet = orders_spreadsheet.worksheet(GAMMA_CLUSTER_SHEET)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
    exit()

# =============== –°–û–°–¢–û–Ø–ù–ò–Ø FSM ===============
class Registration(StatesGroup):
    name = State()
    surname = State()
    position = State()
    shop = State()

class OrderStates(StatesGroup):
    article_input = State()
    quantity_input = State()
    confirmation = State()
    order_reason_input = State()

# =============== –ö–õ–ê–í–ò–ê–¢–£–†–´ ===============
def main_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìã –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    builder.button(text="üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞")
    builder.button(text="üõí –ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞")
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)

def confirm_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
    builder.button(text="‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)

# =============== –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò ===============
def get_supplier_dates_sheet(shop_number: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏—Å—Ç —Å –¥–∞—Ç–∞–º–∏ –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"""
    return orders_spreadsheet.worksheet(f"–î–∞—Ç—ã –≤—ã—Ö–æ–¥–æ–≤ –∑–∞–∫–∞–∑–æ–≤ {shop_number}")
    
async def get_supplier_data(shop_number: str, supplier_id: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    supplier_sheet = get_supplier_dates_sheet(shop_number)
    cached_data = await get_sheet_data(supplier_sheet)
    
    for row in cached_data:
        if row[0] == supplier_id:
            return row
    return None
async def get_user_data(user_id: str):
    try:
        cell = users_sheet.find(user_id)
        return {
            'shop': users_sheet.cell(cell.row, 5).value,
            'name': users_sheet.cell(cell.row, 2).value,
            'surname': users_sheet.cell(cell.row, 3).value,
            'position': users_sheet.cell(cell.row, 4).value
        }
    except:
        return None

async def log_error(user_id: str, error: str):
    await asyncio.sleep(0.1)  # –§–æ–Ω–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logs_sheet.append_row([
        datetime.now().strftime("%d.%m.%Y %H:%M"),
        user_id,
        "ERROR",
        error
    ])



# =============== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===============
@dp.message(F.text == "/start")
async def start_handler(message: types.Message, state: FSMContext):
    user_data = await get_user_data(str(message.from_user.id))
    if user_data:
        await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=main_menu_keyboard())
        return
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Registration.name)

@dp.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Registration.surname)

@dp.message(Registration.surname)
async def process_surname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text.strip())
    await message.answer("üíº –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
    await state.set_state(Registration.position)

@dp.message(Registration.position)
async def process_position(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text.strip())
    await message.answer("üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    await state.set_state(Registration.shop)

@dp.message(Registration.shop)
async def process_shop(message: types.Message, state: FSMContext):
    if not message.text.strip().isdigit():
        await message.answer("‚ùå –ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    
    data = await state.get_data()
    user_id = str(message.from_user.id)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º append_row —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±–µ—Ä—Ç–∫–æ–π
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(
            None,
            users_sheet.append_row, [
                user_id,
                data['name'],
                data['surname'],
                data['position'],
                message.text.strip(),
                datetime.now().strftime("%d.%m.%Y %H:%M")
            ]
        )
        
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")
        await log_error(user_id, str(e))

@dp.message(F.text == "üõí –ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞")
async def handle_client_order(message: types.Message, state: FSMContext):
    user_data = await get_user_data(str(message.from_user.id))
    if not user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    
    await state.update_data(
        shop=user_data['shop'],
        user_name=user_data['name'],
        user_position=user_data['position']
    )
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderStates.article_input)

@dp.message(OrderStates.article_input)
async def process_article(message: types.Message, state: FSMContext):
    article = message.text.strip()
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–∞–º–º–∞-–∫–ª–∞—Å—Ç–µ—Ä–∞
    gamma_data = await get_sheet_data(gamma_cluster_sheet)
    
    unique_key = f"{article}{data['shop']}"
    for row in gamma_data:
        if row[0] == unique_key:
            product_data = dict(zip(gamma_data[0], row))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            break
    else:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    try:
        supplier_id = product_data["–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç."]
        supplier_data_row = await get_supplier_data(data['shop'], supplier_id)
        
        if not supplier_data_row:
            raise ValueError("–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        supplier_data = parse_supplier_data(dict(zip(supplier_data_row[0], supplier_data_row)))
        
        order_date, delivery_date = calculate_delivery_date(supplier_data)
        
        await state.update_data(
            article=article,
            product_name=product_data['–ù–∞–∑–≤–∞–Ω–∏–µ'],
            department=product_data['–û—Ç–¥–µ–ª'],
            order_date=order_date,
            delivery_date=delivery_date,
            supplier_id=supplier_id
        )
        
        await message.answer(
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {article}\n"
            f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product_data['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order_date}\n"
            f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}",
            disable_web_page_preview=True
        )
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(OrderStates.quantity_input)
    except Exception as e:
        await log_error(str(message.from_user.id), f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def parse_supplier_data(record):
    order_days = []
    order_day_1 = record.get('–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞', '')
    order_day_2 = record.get('–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ 2', '')
    order_day_3 = record.get('–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ 3', '')
    
    for day in (order_day_1, order_day_2, order_day_3):
        if day:
            order_days.append(int(day))
    
    return {
        'order_days': order_days,
        'delivery_days': int(record.get('–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω', 0))
    }

@dp.message(OrderStates.quantity_input)
async def process_quantity(message: types.Message, state: FSMContext):
    if not message.text.strip().isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    
    data = await state.update_data(quantity=int(message.text.strip()))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—É:")
    await state.set_state(OrderStates.order_reason_input)

@dp.message(OrderStates.order_reason_input)
async def process_order_reason(message: types.Message, state: FSMContext):
    data = await state.update_data(order_reason=message.text.strip())
    await message.answer(
        f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {data['article']}\n"
        f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {data['product_name']}\n"
        f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {data['order_date']}\n"
        f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_date']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {data['order_reason']}",
        reply_markup=confirm_keyboard()
    )
    await state.set_state(OrderStates.confirmation)

@dp.message(OrderStates.confirmation, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def final_confirmation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    try:
        department_sheet = orders_spreadsheet.worksheet(data['department'])
        cached_department = await get_sheet_data(department_sheet)
        next_row = len(cached_department) + 1
        
        # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ batch_update
        updates = [
            {'range': f'A{next_row}', 'values': [[data['shop']]]},
            {'range': f'B{next_row}', 'values': [[data['article']]]},
            {'range': f'C{next_row}', 'values': [[data['order_reason']]]},
            {'range': f'D{next_row}', 'values': [[datetime.now().strftime("%d.%m.%Y %H:%M")]]},
            {'range': f'E{next_row}', 'values': [[f"{data['user_name']}, {data['user_position']}"]]},
            {'range': f'K{next_row}', 'values': [[str(data['quantity'])]]},
            {'range': f'R{next_row}', 'values': [[str(message.from_user.id)]]}
        ]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required = ['shop', 'article', 'order_reason', 'quantity']
        if not all(data.get(field) for field in required):
            raise ValueError("–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º batch_update –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(
            None,
            department_sheet.batch_update,
            updates
        )
        
        await message.answer("‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=main_menu_keyboard())
        await state.clear()
    except Exception as e:
        await log_error(str(message.from_user.id), f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

# =============== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–ï–ë–•–£–ö–û–í ===============
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    await preload_sheets()  # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    logging.info(f"Webhook –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {WEBHOOK_URL}")

async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.session.close()

async def handle_webhook(request):
    try:
        data = await request.json()
        chat_id = data.get('chat_id')
        text = data.get('text')
        
        if chat_id and text:
            await bot.send_message(chat_id=chat_id, text=text)
            return web.Response(text="Ok", status=200)
        else:
            return web.Response(text="Bad request", status=400)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        return web.Response(text="Error", status=500)

# =============== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ===============
async def update_cache():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞"""
    while True:
        await get_sheet_data(gamma_cluster_sheet, force_update=True)
        for shop in ["–º–∞–≥–∞–∑–∏–Ω1", "–º–∞–≥–∞–∑–∏–Ω2"]:
            await get_sheet_data(
                get_supplier_dates_sheet(shop),
                force_update=True
            )
        await asyncio.sleep(CACHE_TIMEOUT)

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
    asyncio.create_task(update_cache())
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    
    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ polling –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
