import os
import json
import pickle
import io
import re
import gc
from pyzbar.pyzbar import decode
from PIL import Image
from concurrent.futures import ThreadPoolExecutor
from typing import Dict, Any, List
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import Command
from contextlib import suppress
from google.oauth2.service_account import Credentials
import gspread
from gspread.exceptions import APIError, SpreadsheetNotFound
from aiohttp import web
import asyncio
from cachetools import cached, TTLCache
import logging
from tenacity import retry, stop_after_attempt, wait_exponential


logging.basicConfig(
    
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
)

# ===================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ï–†–í–ò–°–ù–û–ì–û –†–ï–ñ–ò–ú–ê =====================
SERVICE_MODE = True
ADMINS = [122086799, 5183727015]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# ===================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–≠–®–ê =====================
CACHE_TTL = 43200  # 12 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
cache = TTLCache(maxsize=1000, ttl=CACHE_TTL)

# ===================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====================
from dotenv import load_dotenv

load_dotenv('secret.env')  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
try:
    BOT_TOKEN = os.environ['BOT_TOKEN']
    GOOGLE_CREDS_JSON = os.environ['GOOGLE_CREDENTIALS']
except KeyError as e:
    raise RuntimeError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º GOOGLE_CREDENTIALS –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç
GOOGLE_CREDS = json.loads(GOOGLE_CREDS_JSON)
SPREADSHEET_NAME = "ShopBotData"
STATSS_SHEET_NAME = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
ORDERS_SPREADSHEET_NAME = "–ö–æ–ø–∏—è –ó–∞–∫–∞–∑—ã –ú–ó 0.2"
USERS_SHEET_NAME = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
GAMMA_CLUSTER_SHEET = "–ì–∞–º–º–∞ –∫–ª–∞—Å—Ç–µ—Ä"
LOGS_SHEET = "–õ–æ–≥–∏"
BARCODES_SHEET_NAME = "–®—Ç—Ä–∏—Ö-–∫–æ–¥—ã"  # –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞–º–∏
MAX_IMAGE_SIZE = 2_000_000  # 2MB –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
MAX_WORKERS = 4  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤
# –í —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
USE_WEBHOOKS = os.getenv('USE_WEBHOOKS', 'false').lower() == 'true'

# –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –≤–µ–±—Ö—É–∫-—Ä–µ–∂–∏–º–∞
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST')  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://your-bot.render.com
WEBHOOK_PATH = "/webhook"  # –ü—É—Ç—å –¥–ª—è –≤–µ–±-—Ö—É–∫–∞
WEBHOOK_PORT = 8443
WEBHOOK_URL = f"{WEBHOOK_HOST}:{WEBHOOK_PORT}{WEBHOOK_PATH}" if USE_WEBHOOKS else None
if USE_WEBHOOKS and not WEBHOOK_HOST.startswith("https://"):
    raise ValueError("WEBHOOK_HOST must be HTTPS URL in webhook mode")


# ===================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====================
credentials = Credentials.from_service_account_info(
    GOOGLE_CREDS,
    scopes=['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
)
client = gspread.authorize(credentials)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
try:
    main_spreadsheet = client.open(SPREADSHEET_NAME)
    users_sheet = main_spreadsheet.worksheet(USERS_SHEET_NAME)
    logs_sheet = main_spreadsheet.worksheet(LOGS_SHEET)
    orders_spreadsheet = client.open(ORDERS_SPREADSHEET_NAME)
    gamma_cluster_sheet = orders_spreadsheet.worksheet(GAMMA_CLUSTER_SHEET)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
    exit()

image_processor = ThreadPoolExecutor(max_workers=MAX_WORKERS)


# ===================== –°–û–°–¢–û–Ø–ù–ò–Ø FSM =====================
class Registration(StatesGroup):
    name = State()
    surname = State()
    position = State()
    shop = State()


class OrderStates(StatesGroup):
    article_input = State()
    shop_selection = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    barcode_scan = State()
    shop_input = State() 
    quantity_input = State()
    confirmation = State()
    order_reason_input = State()


class InfoRequest(StatesGroup):
    article_input = State()


class AdminBroadcast(StatesGroup):
    message_input = State()
    target_selection = State()
    manual_ids = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ ID
    confirmation = State()


class AdminStates(StatesGroup):
    panel = State()
    broadcast_message = State()
    broadcast_target = State()
    manual_ids_input = State()
    service_mode_manage = State()
    cache_manage = State()
    logs_view = State()


# ===================== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====================
def create_keyboard(buttons: List[str], sizes: tuple, resize=True, one_time=False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    builder = ReplyKeyboardBuilder()
    for button in buttons:
        builder.button(text=button)
    builder.adjust(*sizes)
    return builder.as_markup(
        resize_keyboard=resize,
        one_time_keyboard=one_time
    )

def main_menu_keyboard(user_id: int = None):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    buttons = [
        "üìã –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞",
        "üõí –ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user_id and user_id in ADMINS:
        buttons.append("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    
    return create_keyboard(buttons, (2, 1, 1))

def article_input_keyboard():
    return create_keyboard(
        ["üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥", "‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", "‚ùå –û—Ç–º–µ–Ω–∞", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"],
        (2, 2)
    )

def shop_selection_keyboard():
    return create_keyboard(
        ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–π –º–∞–≥–∞–∑–∏–Ω", "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π", "‚ùå –û—Ç–º–µ–Ω–∞"],
        (2, 1)
    )

def confirm_keyboard():
    return create_keyboard(
        ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "‚ùå –û—Ç–º–µ–Ω–∞"],
        (2, 1)
    )

def admin_panel_keyboard():
    return create_keyboard(
        [
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞", 
            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à", "üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤",
            "üîß –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        ],
        (2, 2, 2)
    )

def broadcast_target_keyboard():
    return create_keyboard(
        ["–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", "–ü–æ –º–∞–≥–∞–∑–∏–Ω–∞–º", "–ü–æ –æ—Ç–¥–µ–ª–∞–º", "–í—Ä—É—á–Ω—É—é", "‚ùå –û—Ç–º–µ–Ω–∞"],
        (2, 2, 1)
    )

def service_mode_keyboard():
    return create_keyboard(
        ["üü¢ –í–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º", "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º", "üîô –ù–∞–∑–∞–¥"],
        (2, 1)
    )

def back_to_admin_keyboard():
    return create_keyboard(["üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"], (1,))

def cancel_keyboard():
    return create_keyboard(["‚ùå –û—Ç–º–µ–Ω–∞"], (1,))
    

# ===================== –°–ï–†–í–ò–°–ù–´–ô –†–ï–ñ–ò–ú =====================
async def notify_admins(message: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    for admin_id in ADMINS:
        with suppress(TelegramForbiddenError):
            await bot.send_message(admin_id, message)

async def broadcast(message: str):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    users = users_sheet.col_values(1)[1:]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ A
    for user_id in users:
        with suppress(TelegramForbiddenError, ValueError):
            await bot.send_message(int(user_id), message)

async def toggle_service_mode(enable: bool):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    global SERVICE_MODE
    SERVICE_MODE = enable
    status = "–í–ö–õ–Æ–ß–ï–ù" if enable else "–í–´–ö–õ–Æ–ß–ï–ù"
    await notify_admins(f"üõ† –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º {status}")


# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò =====================

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò =====================
@dp.message(F.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def handle_admin_panel(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    try:
        await message.answer(
            "üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=admin_panel_keyboard()
        )
        await state.set_state(AdminStates.panel)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

@dp.message(AdminStates.panel, F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_admin_stats(message: types.Message):
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_data = pickle.loads(cache.get("users_data", b"[]"))
        users_count = len(users_data) if users_data else 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        stats_data = pickle.loads(cache.get("stats_data", b"[]"))
        orders_count = sum(1 for r in stats_data if len(r) > 8 and r[8] == 'order')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        import psutil
        cpu_usage = psutil.cpu_percent()
        memory_usage = psutil.virtual_memory().percent
        
        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ: {orders_count}\n"
            f"‚Ä¢ –õ–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π: {len(stats_data)}\n\n"
            f"‚öôÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:\n"
            f"‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_usage}%\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {memory_usage}%\n"
            f"‚Ä¢ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º: {'–í–ö–õ' if SERVICE_MODE else '–í–´–ö–õ'}"
        )
        await message.answer(response, reply_markup=back_to_admin_keyboard())
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=admin_panel_keyboard())

@dp.message(AdminStates.panel, F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def handle_broadcast_start(message: types.Message, state: FSMContext):
    await message.answer(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(AdminStates.broadcast_message)

@dp.message(AdminStates.broadcast_message)
async def handle_broadcast_message(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(AdminStates.panel)
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=admin_panel_keyboard())
        return
        
    await state.update_data(broadcast_message=message.html_text)
    await message.answer(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=broadcast_target_keyboard()
    )
    await state.set_state(AdminStates.broadcast_target)

@dp.message(AdminStates.broadcast_target)
async def handle_broadcast_target(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(AdminStates.panel)
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=admin_panel_keyboard())
        return
        
    data = await state.get_data()
    message_text = data['broadcast_message']
    
    # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    if message.text == "–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º":
        users_data = pickle.loads(cache.get("users_data", b"[]"))
        user_ids = [str(user.get("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "")) for user in users_data if user.get("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")]
        success, failed = await send_broadcast(message_text, user_ids)
        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}",
            reply_markup=admin_panel_keyboard()
        )
        await state.set_state(AdminStates.panel)
    
    # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º (–ø—Ä–∏–º–µ—Ä)
    elif message.text == "–ü–æ –º–∞–≥–∞–∑–∏–Ω–∞–º":
        await message.answer(
            "üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
            reply_markup=cancel_keyboard()
        )
        await state.set_state(AdminStates.manual_ids_input)
    
    # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Ä–∞—Å—Å—ã–ª–∫–∏
    else:
        await message.answer(
            "‚è≥ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=admin_panel_keyboard()
        )
        await state.set_state(AdminStates.panel)

@dp.message(AdminStates.manual_ids_input)
async def handle_manual_ids_input(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(AdminStates.panel)
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=admin_panel_keyboard())
        return
        
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        "‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã. –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...",
        reply_markup=admin_panel_keyboard()
    )
    
    # –§–∏–∫—Ç–∏–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    await message.answer(
        "‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Ä–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)",
        reply_markup=admin_panel_keyboard()
    )
    await state.set_state(AdminStates.panel)

@dp.message(AdminStates.panel, F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à")
async def handle_cache_refresh(message: types.Message):
    try:
        await preload_cache()
        await message.answer("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=admin_panel_keyboard())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {str(e)}", reply_markup=admin_panel_keyboard())

@dp.message(AdminStates.panel, F.text == "üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")
async def handle_logs_view(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤
        stats_data = pickle.loads(cache.get("stats_data", b"[]"))
        if len(stats_data) > 20:
            logs = stats_data[-20:]
        else:
            logs = stats_data
        
        log_text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ:\n\n"
        for log in logs:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if len(log) >= 9:
                log_text += f"{log[0]} {log[1]} - {log[2]}: {log[7]} ({log[8]})\n"
            else:
                log_text += f"–ù–µ–ø–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å: {log}\n"
        
        await message.answer(log_text[:4000], reply_markup=admin_panel_keyboard())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=admin_panel_keyboard())

@dp.message(AdminStates.panel, F.text == "üîß –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º")
async def handle_service_mode(message: types.Message, state: FSMContext):
    status = "üü¢ –í–ö–õ–Æ–ß–ï–ù" if SERVICE_MODE else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù"
    await message.answer(
        f"üõ† –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {status}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=service_mode_keyboard()
    )
    await state.set_state(AdminStates.service_mode_manage)

@dp.message(AdminStates.service_mode_manage, F.text == "üü¢ –í–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º")
async def enable_service_mode(message: types.Message):
    global SERVICE_MODE
    SERVICE_MODE = True
    await broadcast("üîß –ë–æ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    await message.answer("‚úÖ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω", reply_markup=admin_panel_keyboard())
    await state.set_state(AdminStates.panel)

@dp.message(AdminStates.service_mode_manage, F.text == "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º")
async def disable_service_mode(message: types.Message):
    global SERVICE_MODE
    SERVICE_MODE = False
    await broadcast("‚úÖ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.")
    await message.answer("‚úÖ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω", reply_markup=admin_panel_keyboard())
    await state.set_state(AdminStates.panel)

@dp.message(AdminStates.service_mode_manage, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_from_service_mode(message: types.Message):
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_panel_keyboard())
    await state.set_state(AdminStates.panel)





# ===================== –°–ò–°–¢–ï–ú–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø =====================
async def get_cached_data(cache_key: str) -> List[Dict]:
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞: {cache_key}")
    if cache_key in cache:
        data = pickle.loads(cache[cache_key])
        print(f"[DEBUG] –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {len(data)} –∑–∞–ø–∏—Å–µ–π")
        return data
    return []


def get_supplier_dates_sheet(shop_number: str) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –ø—Ä–æ—Å—Ç—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = f"supplier_{shop_number}"
    if cache_key in cache:
        return pickle.loads(cache[cache_key])
    
    try:
        sheet = orders_spreadsheet.worksheet(f"–î–∞—Ç—ã –≤—ã—Ö–æ–¥–æ–≤ –∑–∞–∫–∞–∑–æ–≤ {shop_number}")
        data = sheet.get_all_records()
        cache[cache_key] = pickle.dumps(data)
        return data
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(e)}")
        return []


async def preload_cache(_=None):
    """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        stats_sheet = main_spreadsheet.worksheet(STATSS_SHEET_NAME)
        cache["stats_data"] = pickle.dumps(stats_sheet.get_all_records())
    except:
        pass
    try:
        # –ö—ç—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        users_records = users_sheet.get_all_records()
        cache["users_data"] = pickle.dumps(users_records)
        print(f"üë• –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω: {len(users_records)} –∑–∞–ø–∏—Å–µ–π")

        # –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        gamma_records = gamma_cluster_sheet.get_all_records()
        gamma_index = {}
        
        for item in gamma_records:
            article = str(item.get("–ê—Ä—Ç–∏–∫—É–ª", "")).strip()
            shop = str(item.get("–ú–∞–≥–∞–∑–∏–Ω", "")).strip()
            if article and shop:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂ –∫–∞–∫ –∫–ª—é—á –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                key = (article, shop)
                gamma_index[key] = {
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": item.get("–ù–∞–∑–≤–∞–Ω–∏–µ", ""),
                    "–û—Ç–¥–µ–ª": item.get("–û—Ç–¥–µ–ª", ""),
                    "–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.": item.get("–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.", "")
                }
        
        cache["gamma_index"] = pickle.dumps(gamma_index)
        print(f"üì¶ –ö—ç—à —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω: {len(gamma_index)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ó–ê–ì–†–£–ñ–ê–ï–ú –¢–ê–ë–õ–ò–¶–£ –®–¢–†–ò–•-–ö–û–î–û–í
        barcodes_sheet = main_spreadsheet.worksheet(BARCODES_SHEET_NAME)
        barcodes_data = barcodes_sheet.get_all_records()
        barcodes_index = {}
        
        for record in barcodes_data:
            barcode = str(record.get("–®—Ç—Ä–∏—Ö-–∫–æ–¥", "")).strip()
            article = str(record.get("–ê—Ä—Ç–∏–∫—É–ª", "")).strip()
            if barcode and article:
                barcodes_index[barcode] = article
        
        cache["barcodes_index"] = pickle.dumps(barcodes_index)
        print(f"üìä –ö—ç—à —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω: {len(barcodes_index)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {str(e)}")
        raise



def validate_cache_keys():
    required_keys = ['users', 'gamma_cluster']
    for key in required_keys:
        if key not in cache:
            raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞: {key}")


# ===================== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–û–í =====================
@dp.message(Command("stats"))
async def get_stats(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if message.from_user.id not in ADMINS:
        return
    
    try:
        spreadsheet = client.open(ORDERS_SPREADSHEET_NAME)
        stats_sheet = spreadsheet.worksheet(STATS_SHEET_NAME)
        records = stats_sheet.get_all_records()
        
        total = len(records)
        success = len([r for r in records if '‚úÖ' in r['–°—Ç–∞—Ç—É—Å']])
        failed = total - success
        
        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: {total}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {success}\n"
            f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫:\n"
        )
        
        for r in records[-5:]:
            if '‚ùå' in r['–°—Ç–∞—Ç—É—Å']:
                response += f"\n- {r['Date']}: {r['Status']}"
                
        await message.answer(response)
        
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@dp.message(Command("full_stats"))
async def get_full_stats(message: types.Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if message.from_user.id not in ADMINS:
        return
    
    try:
        spreadsheet = client.open(ORDERS_SPREADSHEET_NAME)
        stats_sheet = spreadsheet.worksheet(STATS_SHEET_NAME)
        stats_sheet.export('csv')
        
        with open("stats.csv", "rb") as file:
            await message.answer_document(file, caption="üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

@dp.message(F.text == "/maintenance_on")
async def maintenance_on(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    
    await toggle_service_mode(True)
    await broadcast("üîß –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
    await message.answer("–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

@dp.message(F.text == "/maintenance_off")
async def maintenance_off(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    
    await toggle_service_mode(False)
    await broadcast("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ë–æ—Ç —Å–Ω–æ–≤–∞ –≤ —Ä–∞–±–æ—Ç–µ.")
    await message.answer("–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")


# ===================== –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ò–î–õ–í–ê–† =====================
@dp.update.middleware()
async def service_mode_middleware(handler, event, data):
    if SERVICE_MODE and (event.message or event.callback_query):
        user_id = event.message.from_user.id if event.message else event.callback_query.from_user.id
        if user_id not in ADMINS:
            if event.message:
                await event.message.answer("‚è≥ –ë–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            elif event.callback_query:
                await event.callback_query.answer("‚è≥ –ë–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return
    return await handler(event, data)



@dp.message(F.text.lower().in_(["–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞", "/cancel"]))
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üîÑ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 
                        reply_markup=main_menu_keyboard())



@dp.update.middleware()
async def timeout_middleware(handler, event, data):
    state = data.get('state')
    if state:
        current_state = await state.get_state()
        if current_state:
            state_data = await state.get_data()
            last_activity_str = state_data.get('last_activity')

            try:
                last_activity = datetime.fromisoformat(last_activity_str)
            except (ValueError, TypeError):
                last_activity = datetime.min
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å:
                user_id = "unknown"
                if event.message:
                    user_id = event.message.from_user.id
                elif event.callback_query:
                    user_id = event.callback_query.from_user.id
                logging.warning(f"Invalid last_activity format for user {user_id}")

            if datetime.now() - last_activity > timedelta(minutes=20):
                await state.clear()
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å:
                if event.message:
                    await event.message.answer("üïí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                elif event.callback_query:
                    await event.callback_query.message.answer("üïí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return

            await state.update_data(last_activity=datetime.now().isoformat())

    return await handler(event, data)
    await message.answer(reply_markup=main_menu_keyboard())

# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================
async def get_user_data(user_id: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ—Å—Ç—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = f"user_{user_id}"
    if cache_key in cache:
        return cache[cache_key]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_data = pickle.loads(cache.get("users_data", b""))
        if not users_data:
            # –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            users_data = users_sheet.get_all_records()
            cache["users_data"] = pickle.dumps(users_data)
            print(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}")
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for user in users_data:
            
            if str(user.get("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "")).strip() == str(user_id).strip():
                # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = {
                    'shop': user.get("–ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞", ""),
                    'name': user.get("–ò–º—è", ""),
                    'surname': user.get("–§–∞–º–∏–ª–∏—è", ""),
                    'position': user.get("–î–æ–ª–∂–Ω–æ—Å—Ç—å", "")
                }
                cache[cache_key] = user_data
                return user_data
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_user_data: {str(e)}")
        return None


async def log_error(user_id: str, error: str):
    logs_sheet.append_row([
        datetime.now().strftime("%d.%m.%Y %H:%M"),
        user_id,
        "ERROR",
        error
    ])




def calculate_delivery_date(supplier_data: dict) -> tuple:
    today = datetime.now()
    current_weekday = today.isoweekday()

    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞
    nearest_day = None
    for day in sorted(supplier_data['order_days']):
        if day >= current_weekday:
            nearest_day = day
            break
    if not nearest_day:
        nearest_day = min(supplier_data['order_days'])
    delta_days = (nearest_day - current_weekday) % 7
    order_date = today + timedelta(days=delta_days)

    # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –ø–æ—Å—Ç–∞–≤–∫–∏
    delivery_date = order_date + timedelta(days=supplier_data['delivery_days'])
    return (
        order_date.strftime("%d.%m.%Y"),
        delivery_date.strftime("%d.%m.%Y")
    )


async def process_barcode_image(photo: types.PhotoSize) -> (str, str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤
        if "barcodes_index" not in cache or not cache["barcodes_index"]:
            return None, "–°–∏—Å—Ç–µ–º–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file = await bot.get_file(photo.file_id)
        image_bytes = await bot.download(file.file_path)
        
        logging.info(f"Processing image: {len(image_bytes)} bytes")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        if len(image_bytes) > MAX_IMAGE_SIZE:
            return None, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (> {MAX_IMAGE_SIZE//1024}KB)"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_running_loop()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é
        with io.BytesIO(image_bytes) as buffer:
            image = await loop.run_in_executor(
                image_processor, 
                Image.open, 
                buffer
            )
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
            image = image.convert('L')  # –ì—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ
            image.thumbnail((800, 800))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                decoded_objects = await asyncio.wait_for(
                    loop.run_in_executor(image_processor, decode, image),
                    timeout=10.0
                )
            except asyncio.TimeoutError:
                return None, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            
            # –Ø–≤–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            del image
        
        if not decoded_objects:
            return None, "–®—Ç—Ä–∏—Ö-–∫–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"
        
        barcode_data = decoded_objects[0].data.decode("utf-8").strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ –∫—ç—à–∞
        barcodes_index = pickle.loads(cache["barcodes_index"])
        article = barcodes_index.get(barcode_data)
        
        if not article:
            return None, f"–®—Ç—Ä–∏—Ö-–∫–æ–¥ {barcode_data} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"
        
        return article, None
        
    except Exception as e:
        logging.exception(f"Barcode processing error: {str(e)}")
        return None, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    finally:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –º—É—Å–æ—Ä–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        gc.collect()

@dp.message(Command("test_barcode"))
async def test_barcode(message: types.Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤"""
    if message.from_user.id not in ADMINS:
        return
        
    try:
        barcodes_index = pickle.loads(cache.get("barcodes_index", b""))
        if not barcodes_index:
            await message.answer("‚ùå –ö—ç—à —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤ –ø—É—Å—Ç")
            return
            
        test_barcode = next(iter(barcodes_index.keys()))
        article = barcodes_index[test_barcode]
        await message.answer(f"–¢–µ—Å—Ç–æ–≤—ã–π —à—Ç—Ä–∏—Ö-–∫–æ–¥: {test_barcode}\n–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä—Ç–∏–∫—É–ª—É: {article}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")



# ========================== –ü–ê–†–°–ï–† ===========================
async def get_product_info(article: str, shop: str) -> dict:
    try:
        gamma_index = pickle.loads(cache.get("gamma_index", b""))
        key = (str(article).strip(), str(shop).strip())
        product_data = gamma_index.get(key)
        
        if not product_data:
            print(f"[INFO] –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: –∞—Ä—Ç–∏–∫—É–ª {article}, –º–∞–≥–∞–∑–∏–Ω {shop}")
            return None
        
        print(f"[INFO] –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {article}, –º–∞–≥–∞–∑–∏–Ω: {shop}")
        
        supplier_id = str(product_data.get("–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.", "")).strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        supplier_list = get_supplier_dates_sheet(shop)
        
        # –ò—â–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
        supplier_data = next(
            (item for item in supplier_list 
             if str(item.get("–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.", "")).strip() == supplier_id),
            None
        )
        
        if not supplier_data:
            print(f"[INFO] –ü–æ—Å—Ç–∞–≤—â–∏–∫ {supplier_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop}")
            return {
                '–ê—Ä—Ç–∏–∫—É–ª': article,
                '–ù–∞–∑–≤–∞–Ω–∏–µ': product_data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''),
                '–û—Ç–¥–µ–ª': str(product_data.get('–û—Ç–¥–µ–ª', '')),
                '–ú–∞–≥–∞–∑–∏–Ω': shop,
                '–ü–æ—Å—Ç–∞–≤—â–∏–∫': '–¢–æ–≤–∞—Ä –†–¶'
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        supplier_name = supplier_data.get("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω. –ø–æ—Å—Ç.", "–ù–µ —É–∫–∞–∑–∞–Ω–æ").strip()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        parsed_supplier = parse_supplier_data(supplier_data)
        order_date, delivery_date = calculate_delivery_date(parsed_supplier)
        
        print(f"[INFO] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {article}, –º–∞–≥–∞–∑–∏–Ω: {shop}")
        
        return {
            '–ê—Ä—Ç–∏–∫—É–ª': article,
            '–ù–∞–∑–≤–∞–Ω–∏–µ': product_data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''),
            '–û—Ç–¥–µ–ª': str(product_data.get('–û—Ç–¥–µ–ª', '')),
            '–ú–∞–≥–∞–∑–∏–Ω': shop,
            '–ü–æ—Å—Ç–∞–≤—â–∏–∫': supplier_name,
            '–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞': order_date,
            '–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏': delivery_date,
            '–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': supplier_id,
            '–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': parsed_supplier
        }
    
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ get_product_info: {str(e)}")
        logging.error(f"Product info error: {str(e)}")
        return None


# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====================
@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    user_data = await get_user_data(str(message.from_user.id))
    if user_data:
        await message.answer("‚ÑπÔ∏è –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_menu_keyboard(message.from_user.id))
        return
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove()
    )
    await log_user_activity(message.from_user.id, "/start", "registration")
    await state.set_state(Registration.name)
    

@dp.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    await state.update_data(name=message.text.strip())
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Registration.surname)


@dp.message(Registration.surname)
async def process_surname(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    await state.update_data(surname=message.text.strip())
    await message.answer("üíº –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
    await state.set_state(Registration.position)


@dp.message(Registration.position)
async def process_position(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    await state.update_data(position=message.text.strip())
    await message.answer("üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –Ω—É–ª–µ–π):")
    await state.set_state(Registration.shop)


@dp.message(Registration.shop)
async def process_shop(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    if not message.text.strip().isdigit():
        await message.answer("‚ùå –ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    data = await state.get_data()
    try:
        users_sheet.append_row([
            str(message.from_user.id),
            data['name'],
            data['surname'],
            data['position'],
            message.text.strip(),
            datetime.now().strftime("%d.%m.%Y %H:%M")
        ])
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")
        await log_error(str(message.from_user.id), str(e))


@dp.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def handle_back(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu_keyboard(message.from_user.id)
    )


@dp.message(F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_back_to_main(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu_keyboard(message.from_user.id)
    )


@dp.message(F.text == "üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def handle_back_to_admin(message: types.Message, state: FSMContext):
    await handle_admin_panel(message, state)


@dp.message(F.text == "üõí –ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞")
async def handle_client_order(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    user_data = await get_user_data(str(message.from_user.id))
    
    if not user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    
    await state.update_data(
        shop=user_data['shop'],
        user_name=user_data['name'],
        user_position=user_data['position']
    )
    
    await message.answer(
        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞:",
        reply_markup=article_input_keyboard()
    )
    await log_user_activity(message.from_user.id, "–ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞", "order")
    await state.set_state(OrderStates.article_input)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è


@dp.message(OrderStates.barcode_scan, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_scan(message: types.Message, state: FSMContext):
    await message.answer(
        "‚ùå –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=article_input_keyboard()
    )
    await state.set_state(OrderStates.article_input)


@dp.message(OrderStates.article_input, F.text == "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥(–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
async def handle_scan_choice(message: types.Message, state: FSMContext):
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞\n\n"
        "–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:\n"
        "- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω\n"
        "- –î–µ—Ä–∂–∏—Ç–µ –∫–∞–º–µ—Ä—É –ø—Ä—è–º–æ –Ω–∞–ø—Ä–æ—Ç–∏–≤ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞\n"
        "- –ò–∑–±–µ–≥–∞–π—Ç–µ –±–ª–∏–∫–æ–≤ –∏ —Ç–µ–Ω–µ–π",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(OrderStates.barcode_scan)

@dp.message(OrderStates.article_input, F.text == "‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
async def handle_manual_choice(message: types.Message, state: FSMContext):
    await message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=article_input_keyboard()
    )


@dp.message(OrderStates.article_input)
async def process_article_manual(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if message.text in ["üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥", "‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", "‚ùå –û—Ç–º–µ–Ω–∞", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"]:
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞"]:
        await state.clear()
        await message.answer("üîÑ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_menu_keyboard())
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())
        return
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª.")
        return
        
    article = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
    if not re.match(r'^\d{4,10}$', article):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ç–∏–∫—É–ª–∞. –ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 4-10 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
        
    await state.update_data(article=article)
    
    await message.answer(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:",
        reply_markup=shop_selection_keyboard()
    )
    await state.set_state(OrderStates.shop_selection)



@dp.message(OrderStates.barcode_scan, F.photo)
async def handle_barcode_scan(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        processing_msg = await message.answer("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = message.photo[-1]
        article, error = await process_barcode_image(photo)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        if error:
            await message.answer(
                f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –≤—Ä—É—á–Ω—É—é.",
                reply_markup=article_input_keyboard()
            )
            await state.set_state(OrderStates.article_input)
            return
            
        await state.update_data(article=article)
        await message.answer(
            f"‚úÖ –®—Ç—Ä–∏—Ö-–∫–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n–ê—Ä—Ç–∏–∫—É–ª: {article}",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞
        await message.answer(
            "üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:",
            reply_markup=shop_selection_keyboard()
        )
        await state.set_state(OrderStates.shop_selection)
        
    except Exception as e:
        logging.exception("Barcode scan error")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –≤—Ä—É—á–Ω—É—é.",
            reply_markup=article_input_keyboard()
        )
        await state.set_state(OrderStates.article_input)


@dp.message(OrderStates.shop_input)
async def process_custom_shop(message: types.Message, state: FSMContext):
    shop = message.text.strip()
    if not shop.isdigit() or shop.startswith('0'):
        await message.answer("‚ùó –ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –±–µ–∑ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    await state.update_data(selected_shop=shop)
    await message.answer("‚úÖ –ú–∞–≥–∞–∑–∏–Ω –≤—ã–±—Ä–∞–Ω\n üîÑ –ó–∞–≥—Ä—É–∂–∞—é", reply_markup=ReplyKeyboardRemove())
    await process_article_continuation(message, state)

@dp.message(OrderStates.shop_selection)
async def process_shop_selection(message: types.Message, state: FSMContext):
    user_data = await get_user_data(str(message.from_user.id))
    
    if message.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–π –º–∞–≥–∞–∑–∏–Ω":
        selected_shop = user_data['shop']
    elif message.text == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π":
        await message.answer(
            "üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π):",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(OrderStates.shop_input)
        return
    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer(
            "‚ùå –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=main_menu_keyboard()
        )
        await state.clear()
        return
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é",
            reply_markup=shop_selection_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –≤ FSM
    await state.update_data(selected_shop=selected_shop)
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é", reply_markup=ReplyKeyboardRemove())
    await process_article_continuation(message, state)
    


async def process_article_continuation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    article = data.get('article')
    selected_shop = data.get('selected_shop')
    product_info = await get_product_info(article, selected_shop)
    if not product_info:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ")
        await state.clear()
        return
    response = (
        f"–ú–∞–≥–∞–∑–∏–Ω: {selected_shop}\n"
        f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {product_info['–ê—Ä—Ç–∏–∫—É–ª']}\n"
        f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
        f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {product_info['–ü–æ—Å—Ç–∞–≤—â–∏–∫']}\n" 
        f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {product_info['–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞']}\n"
        f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {product_info['–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏']}\n"
    )
    await state.update_data(
        article=product_info['–ê—Ä—Ç–∏–∫—É–ª'],
        product_name=product_info['–ù–∞–∑–≤–∞–Ω–∏–µ'],
        department=product_info['–û—Ç–¥–µ–ª'],
        order_date=product_info['–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞'],
        delivery_date=product_info['–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏'],
        supplier_id=product_info['–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'],
        supplier_name=product_info['–ü–æ—Å—Ç–∞–≤—â–∏–∫']
    )
    await message.answer(response)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_keyboard())
    await state.set_state(OrderStates.quantity_input)

def parse_supplier_data(record: dict):
    order_days = []
    for key in ['–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞', '–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ 2', '–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ 3']:
        value = str(record.get(key, '')).strip()
        if value and value.isdigit():
            order_days.append(int(value))
    
    delivery_days = str(record.get('–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω', '0')).strip()
    return {
        'supplier_id': str(record.get('–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.', '')),
        'order_days': sorted(list(set(order_days))),
        'delivery_days': int(delivery_days) if delivery_days.isdigit() else 0
    }


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(OrderStates.quantity_input)
async def process_quantity(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if message.text.strip().lower() in ["–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞"]:
        await state.clear()
        await message.answer("üîÑ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_menu_keyboard())
        return
        
    await state.update_data(last_activity=datetime.now().isoformat())
    if not message.text.strip().isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=cancel_keyboard())
        return
        
    data = await state.get_data()
    await state.update_data(quantity=int(message.text.strip()))
    # –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–º–µ–Ω—ã
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—É:", reply_markup=cancel_keyboard())
    await state.set_state(OrderStates.order_reason_input)


@dp.message(OrderStates.order_reason_input)
async def process_order_reason(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if message.text.strip().lower() in ["–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞"]:
        await state.clear()
        await message.answer("üîÑ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_menu_keyboard())
        return
        
    await state.update_data(last_activity=datetime.now().isoformat())
    data = await state.get_data()
    order_reason = message.text.strip()
    selected_shop = data.get('selected_shop')
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(order_reason=order_reason)
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await message.answer(
        "üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {selected_shop}\n"
        f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {data['article']}\n"
        f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {data['product_name']}\n"
        f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {data['supplier_name']}\n" 
        f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {data['order_date']}\n"
        f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_date']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞/–ü—Ä–∏—á–∏–Ω–∞: {order_reason}\n",
        reply_markup=confirm_keyboard()
    )
    await state.set_state(OrderStates.confirmation)


@dp.message(OrderStates.confirmation, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def final_confirmation(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    data = await state.get_data()
    selected_shop = data['selected_shop']
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['selected_shop', 'article', 'order_reason', 'quantity', 'department']
        for field in required_fields:
            if data.get(field) is None:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")

        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç –æ—Ç–¥–µ–ª–∞
        department_sheet = orders_spreadsheet.worksheet(data['department'])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º next_row –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        try:
            next_row = len(department_sheet.col_values(1)) + 1
        except APIError as e:
            logging.error(f"–û—à–∏–±–∫–∞ Google Sheets: {str(e)}")
            next_row = 1  # –ù–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updates = [
            {'range': f'A{next_row}', 'values': [[selected_shop]]},
            {'range': f'B{next_row}', 'values': [[int(data['article'])]]},
            {'range': f'C{next_row}', 'values': [[data['order_reason']]]},
            {'range': f'D{next_row}', 'values': [[datetime.now().strftime("%d.%m.%Y %H:%M")]]},
            {'range': f'E{next_row}', 'values': [[f"{data['user_name']}, {data['user_position']}"]]},
            {'range': f'K{next_row}', 'values': [[int(data['quantity'])]]},
            {'range': f'R{next_row}', 'values': [[int(message.from_user.id)]]}
        ]

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        department_sheet.batch_update(updates)
        await message.answer("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=main_menu_keyboard())
        await log_user_activity(message.from_user.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å","Confirmation")
        await state.clear()

    except Exception as e:
        await log_error(message.from_user.id, f"Save Error: {str(e)}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

@dp.message(OrderStates.confirmation, F.text == "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
async def correct_quantity(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderStates.quantity_input)


@dp.message(OrderStates.confirmation, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_order(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard())

@dp.message(OrderStates.shop_selection, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@dp.message(OrderStates.shop_input, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_shop_selection(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Ç–º–µ–Ω—ë–Ω", reply_markup=main_menu_keyboard())

@dp.message(OrderStates.article_input, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_order_process(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
@dp.message(OrderStates.quantity_input, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_order_process(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
@dp.message(OrderStates.order_reason_input, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_order_process(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())


@dp.message(F.text == "üìã –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
async def handle_info_request(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    await log_user_activity(message.from_user.id, "–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "info")
    user_data = await get_user_data(str(message.from_user.id))
    if not user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
        
    await state.update_data(shop=user_data['shop'])
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:", reply_markup=article_input_keyboard())
    await state.set_state(InfoRequest.article_input)



@dp.message(InfoRequest.article_input, F.photo)
async def handle_barcode_info(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    await state.update_data(last_activity=datetime.now().isoformat())
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo = message.photo[-1]
    article, error = await process_barcode_image(photo)
    
    if error:
        await message.answer(error)
        return
    
    data = await state.get_data()
    user_shop = data['shop']
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product_info = await get_product_info(article, user_shop)
    if not product_info:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    response = (
        f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {user_shop}\n"
        f"üì¶–ê—Ä—Ç–∏–∫—É–ª: {product_info['–ê—Ä—Ç–∏–∫—É–ª']}\n"
        f"üè∑Ô∏è–ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
        f"üî¢–û—Ç–¥–µ–ª: {product_info['–û—Ç–¥–µ–ª']}\n"
        f"üìÖ–ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {product_info['–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞']}\n"
        f"üöö–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {product_info['–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏']}\n"
        f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {product_info['–ü–æ—Å—Ç–∞–≤—â–∏–∫']}" 
    )
    
    await message.answer(response, reply_markup=main_menu_keyboard())
    await state.clear()


@dp.message(InfoRequest.article_input)
async def process_info_request_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (—É–∂–µ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
    if message.photo:
        return
        
    article = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
    if not re.match(r'^\d{4,10}$', article):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ç–∏–∫—É–ª–∞. –ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 4-10 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
        
    data = await state.get_data()
    user_shop = data['shop']
    
    product_info = await get_product_info(article, user_shop)
    if not product_info:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    response = (
        f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {user_shop}\n"
        f"üì¶–ê—Ä—Ç–∏–∫—É–ª: {product_info['–ê—Ä—Ç–∏–∫—É–ª']}\n"
        f"üè∑Ô∏è–ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
        f"üî¢–û—Ç–¥–µ–ª: {product_info['–û—Ç–¥–µ–ª']}\n"
        f"üìÖ–ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {product_info['–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞']}\n"
        f"üöö–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {product_info['–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏']}\n"
        f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {product_info['–ü–æ—Å—Ç–∞–≤—â–∏–∫']}" 
    )
    
    await message.answer(response, reply_markup=main_menu_keyboard())
    await state.clear()


@dp.message(F.text == "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞")
async def handle_stock_check(message: types.Message):
    await message.answer("üõ†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")



@dp.message(Command("test_scan"))
async def test_scan_command(message: types.Message):
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å–∫–∞–Ω–µ—Ä–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤"""
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    await state.set_data({"test_mode": True})
    await state.set_state(OrderStates.barcode_scan)

@dp.message(OrderStates.barcode_scan, F.photo)
async def handle_test_scan(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("test_mode"):
        await handle_barcode_scan(message, state)
        return
        
    try:
        processing_msg = await message.answer("üîç –¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
        photo = message.photo[-1]
        article, error = await process_barcode_image(photo)
        await processing_msg.delete()
        
        if error:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}")
        else:
            await message.answer(f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –†–∞—Å–ø–æ–∑–Ω–∞–Ω –∞—Ä—Ç–∏–∫—É–ª: {article}")
            
    finally:
        await state.clear()
        await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())

# ===================== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–≠–®–ê =====================
@dp.message(F.text == "/reload_cache")
async def reload_cache_command(message: types.Message):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π"""
    try:
        cache.clear()
        await cache_sheet_data(users_sheet, "users")
        await cache_sheet_data(gamma_cluster_sheet, "gamma_cluster")
        await message.answer("‚úÖ –ö—ç—à –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")



@dp.message(F.text == "/debug_article")
async def debug_article(message: types.Message):
    try:
        gamma_data = cache.get("gamma_cluster", [])
        if not gamma_data:
            await message.answer("‚ùå –ö—ç—à —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç")
            return
            
        sample_item = gamma_data[0]
        debug_info = (
            f"üîç –ü—Ä–∏–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –∫—ç—à–∞:\n"
            f"–¢–∏–ø –∞—Ä—Ç–∏–∫—É–ª–∞: {type(sample_item.get('–ê—Ä—Ç–∏–∫—É–ª'))}\n"
            f"–ó–Ω–∞—á–µ–Ω–∏–µ: {sample_item.get('–ê—Ä—Ç–∏–∫—É–ª')}\n"
            f"–í—Å–µ –∫–ª—é—á–∏: {list(sample_item.keys())}"
        )
        await message.answer(debug_info)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")



@dp.message(F.text == "/check_cache")
async def check_cache(message: types.Message):
    gamma_data = cache.get("gamma_cluster", [])
    response = (
        f"–ö—ç—à gamma_cluster: {len(gamma_data)} –∑–∞–ø–∏—Å–µ–π\n"
        f"–ü—Ä–∏–º–µ—Ä: {gamma_data[:1] if gamma_data else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
    )
    await message.answer(response)




# ===================== –†–ê–°–°–´–õ–ö–ê =====================
@dp.message(Command("broadcast"))
async def start_broadcast(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    if message.from_user.id not in ADMINS:
        return
    await message.answer(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ —Å –º–µ–¥–∏–∞-–≤–ª–æ–∂–µ–Ω–∏—è–º–∏):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AdminBroadcast.message_input)

@dp.message(AdminBroadcast.message_input)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    content = {
        'text': message.html_text,
        'media': None,
        'type': 'text'
    }
    if message.photo:
        content.update({
            'type': 'photo',
            'media': message.photo[-1].file_id,
            'caption': message.caption
        })
    elif message.document:
        content.update({
            'type': 'document',
            'media': message.document.file_id,
            'caption': message.caption
        })
    await state.update_data(content=content)
    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    preview_text = "‚úâÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
    if content['type'] == 'text':
        preview_text += content['text']
    else:
        preview_text += f"[{content['type'].upper()}] {content.get('caption', '')}"
    await message.answer(
        preview_text,
        reply_markup=target_selection_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    )
    await state.set_state(AdminBroadcast.target_selection)

@dp.message(AdminBroadcast.target_selection)
async def handle_target_selection(message: types.Message, state: FSMContext):
    if message.text == "–í—Å–µ–º":
        await state.update_data(target="all")
        await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", reply_markup=broadcast_confirmation_keyboard())
        await state.set_state(AdminBroadcast.confirmation)
    elif message.text == "–í—Ä—É—á–Ω—É—é":
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(AdminBroadcast.manual_ids)
    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_menu_keyboard())
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=target_selection_keyboard())

@dp.message(AdminBroadcast.manual_ids)
async def process_manual_ids(message: types.Message, state: FSMContext):
    user_ids = [id.strip() for id in message.text.split(",") if id.strip().isdigit()]
    if not user_ids:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    await state.update_data(target="manual", user_ids=user_ids)
    await message.answer("‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–≤–µ–¥–µ–Ω—ã", reply_markup=broadcast_confirmation_keyboard())
    await state.set_state(AdminBroadcast.confirmation)

@dp.message(AdminBroadcast.confirmation, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def confirm_broadcast(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    data = await state.get_data()
    content = data['content']
    target = data.get('target', 'all')
    user_ids = data.get('user_ids')
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥–∏
    logs_sheet.append_row([
        datetime.now().strftime("%d.%m.%Y %H:%M"),
        message.from_user.id,
        "BROADCAST",
        f"Type: {content['type']}, Chars: {len(content.get('text', '') or content.get('caption', ''))}"
    ])
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...", reply_markup=main_menu_keyboard())
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
    asyncio.create_task(send_broadcast(content, target, user_ids))
    await state.clear()

async def send_broadcast(message_text: str, user_ids: list) -> tuple:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    success = 0
    failed = 0
    failed_ids = []
    
    for user_id in user_ids:
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ ID
            if not user_id or not user_id.strip():
                continue
                
            await bot.send_message(int(user_id), message_text)
            success += 1
            await asyncio.sleep(0.1)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
        except Exception as e:
            failed += 1
            failed_ids.append(user_id)
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {user_id} - {str(e)}")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logging.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ={success}, –Ω–µ—É–¥–∞—á–Ω–æ={failed}")
    if failed_ids:
        logging.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {', '.join(failed_ids)}")
    
    return success, failed
    await bot.send_message(
        chat_id=ADMINS[0],
        text=f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )




#================================–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞==========================================#


STATS_COLUMNS = [
    "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "User ID", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", 
    "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ú–∞–≥–∞–∑–∏–Ω", "–ö–æ–º–∞–Ω–¥–∞", "–¢–∏–ø —Å–æ–±—ã—Ç–∏—è"
]

async def log_user_activity(user_id: str, command: str, event_type: str = "command"):
    """–ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_data = await get_user_data(str(user_id))
        if not user_data:
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        new_record = [
            datetime.now().strftime("%d.%m.%Y"),
            datetime.now().strftime("%H:%M:%S"),
            str(user_id),
            user_data.get('name', ''),
            user_data.get('surname', ''),
            user_data.get('position', ''),
            user_data.get('shop', ''),
            command,
            event_type
        ]
        
        stats_sheet = main_spreadsheet.worksheet(STATSS_SHEET_NAME)
        stats_sheet.append_row(new_record)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if "stats_data" in cache:
            stats_data = pickle.loads(cache["stats_data"])
            stats_data.append(new_record)
            cache["stats_data"] = pickle.dumps(stats_data[-1000:])  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

# ===================== –û–ë–©–ê–Ø –õ–û–ì–ò–ö–ê –ó–ê–ü–£–°–ö–ê =====================
async def scheduled_cache_update():
    while True:
        await asyncio.sleep(3600 * 12)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
        try:
            await preload_cache()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {str(e)}")

async def startup():
    asyncio.create_task(scheduled_cache_update())
     
    """–û–±—â–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤"""
    startup_msg = "üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"
    print(startup_msg)
    try:  
        print("‚ôªÔ∏è –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞...")
        await preload_cache()
        print(f"‚úÖ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω. –ö–ª—é—á–∏: {list(cache.keys())[:5]}...")
    except Exception as e:
        error_msg = f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}"
        print(error_msg)
        raise

async def shutdown():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤"""
    try:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–π AIOHTTP
        await bot.session.close()
        await dp.storage.close()
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–µ–±—Ö—É–∫–∞
        if USE_WEBHOOKS:
            await bot.delete_webhook()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {str(e)}")
        
    finally:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        for task in tasks:
            task.cancel()



# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–ï–ë–•–£–ö–û–í =====================
async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤"""
    update_data = await request.json()
    update = types.Update(**update_data)
    await dp.feed_update(bot=bot, update=update)
    return web.Response(text="OK", status=200)

# ===================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====================
app = web.Application()
if USE_WEBHOOKS:
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.on_startup.append(lambda _: startup())
    app.on_shutdown.append(lambda _: shutdown())

# ===================== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö =====================
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    await startup()
    
    if USE_WEBHOOKS:
        # –¢–æ–ª—å–∫–æ –≤ –≤–µ–±—Ö—É–∫-—Ä–µ–∂–∏–º–µ
        await bot.set_webhook(
            url=WEBHOOK_URL,
            drop_pending_updates=True
        )
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', WEBHOOK_PORT)
        await site.start()
        print(f"‚úÖ –†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–æ–≤: {WEBHOOK_URL}")
        while True:
            await asyncio.sleep(3600)
    else:
        # –†–µ–∂–∏–º –ø–æ–ª–ª–∏–Ω–≥–∞
        print("‚úÖ –†–µ–∂–∏–º –ø–æ–ª–ª–∏–Ω–≥–∞")
        await dp.start_polling(bot, skip_updates=True)

# ===================== –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ =====================
async def shutdown():
    try:
        if USE_WEBHOOKS:
            await bot.delete_webhook()
        await bot.session.close()
        await dp.storage.close()
    except Exception as e:
        logging.error(f"Shutdown error: {str(e)}")
    finally:
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        for task in tasks:
            task.cancel()
if __name__ == "__main__":
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        print("\nüõë Bot stopped by user")
    except Exception as e:
        logging.critical(f"Critical error: {str(e)}")
    finally:
        loop.run_until_complete(shutdown())
        loop.close()
