import os
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from google.oauth2.service_account import Credentials
import gspread
from gspread.exceptions import APIError, SpreadsheetNotFound
from aiohttp import web
import logging

# ===================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====================
from dotenv import load_dotenv
load_dotenv('secret.env')  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
try:
    BOT_TOKEN = os.environ['BOT_TOKEN']
    GOOGLE_CREDS_JSON = os.environ['GOOGLE_CREDENTIALS']
except KeyError as e:
    raise RuntimeError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º GOOGLE_CREDENTIALS –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç
GOOGLE_CREDS = json.loads(GOOGLE_CREDS_JSON)
SPREADSHEET_NAME = "ShopBotData"
ORDERS_SPREADSHEET_NAME = "–ö–æ–ø–∏—è –ó–∞–∫–∞–∑—ã –ú–ó 0.2"
USERS_SHEET_NAME = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
GAMMA_CLUSTER_SHEET = "–ì–∞–º–º–∞ –∫–ª–∞—Å—Ç–µ—Ä"
LOGS_SHEET = "–õ–æ–≥–∏"
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST')  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://123.45.67.89.sslip.io
WEBHOOK_PATH = "/webhook"  # –ü—É—Ç—å –¥–ª—è –≤–µ–±-—Ö—É–∫–∞
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# ===================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====================
credentials = Credentials.from_service_account_info(
    GOOGLE_CREDS,
    scopes=['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
)
client = gspread.authorize(credentials)
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
try:
    main_spreadsheet = client.open(SPREADSHEET_NAME)
    users_sheet = main_spreadsheet.worksheet(USERS_SHEET_NAME)
    logs_sheet = main_spreadsheet.worksheet(LOGS_SHEET)
    orders_spreadsheet = client.open(ORDERS_SPREADSHEET_NAME)
    gamma_cluster_sheet = orders_spreadsheet.worksheet(GAMMA_CLUSTER_SHEET)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
    exit()

# ===================== –°–û–°–¢–û–Ø–ù–ò–Ø FSM =====================
class Registration(StatesGroup):
    name = State()
    surname = State()
    position = State()
    shop = State()

class OrderStates(StatesGroup):
    article_input = State()
    quantity_input = State()
    confirmation = State()
    order_reason_input = State()
    article_input_info = State()

# ===================== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====================
def main_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìã –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    builder.button(text="üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞")
    builder.button(text="üõí –ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞")
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)

def confirm_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
    builder.button(text="‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)


def make_order_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)

# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================
async def get_user_data(user_id: str):
    try:
        cell = users_sheet.find(user_id)
        return {
            'shop': users_sheet.cell(cell.row, 5).value,
            'name': users_sheet.cell(cell.row, 2).value,
            'surname': users_sheet.cell(cell.row, 3).value,
            'position': users_sheet.cell(cell.row, 4).value
        }
    except:
        return None

async def log_error(user_id: str, error: str):
    logs_sheet.append_row([
        datetime.now().strftime("%d.%m.%Y %H:%M"),
        user_id,
        "ERROR",
        error
    ])

def get_supplier_dates_sheet(shop_number: str):
    return orders_spreadsheet.worksheet(f"–î–∞—Ç—ã –≤—ã—Ö–æ–¥–æ–≤ –∑–∞–∫–∞–∑–æ–≤ {shop_number}")

def calculate_delivery_date(supplier_data: dict) -> tuple:
    today = datetime.now()
    current_weekday = today.isoweekday()
    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞
    nearest_day = None
    for day in sorted(supplier_data['order_days']):
        if day >= current_weekday:
            nearest_day = day
            break
    if not nearest_day:
        nearest_day = min(supplier_data['order_days'])
    delta_days = (nearest_day - current_weekday) % 7
    order_date = today + timedelta(days=delta_days)
    # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –ø–æ—Å—Ç–∞–≤–∫–∏
    delivery_date = order_date + timedelta(days=supplier_data['delivery_days'])
    return (
        order_date.strftime("%d.%m.%Y"),
        delivery_date.strftime("%d.%m.%Y")
    )

def parse_supplier_data(record):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø–∏—Å–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.
    :param record: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.
    :return: –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    order_days = []
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–Ω–∏ –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ç—Ä–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    order_day_1 = record.get('–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞', '')
    order_day_2 = record.get('–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ 2', '')
    order_day_3 = record.get('–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ 3', '')
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
    if order_day_1:
        order_days.append(int(order_day_1))
    if order_day_2:
        order_days.append(int(order_day_2))
    if order_day_3:
        order_days.append(int(order_day_3))
    return {
        'supplier_id': record.get('–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.', ''),
        'order_days': order_days,
        'delivery_days': int(record.get('–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω', 0)),  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
        'supplier_name': record.get('–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω. –ø–æ—Å—Ç.', '')
    }

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====================
@dp.message(F.text == "/start")
async def start_handler(message: types.Message, state: FSMContext):
    user_data = await get_user_data(str(message.from_user.id))
    if user_data:
        await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=main_menu_keyboard())
        return
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Registration.name)

@dp.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Registration.surname)

@dp.message(Registration.surname)
async def process_surname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text.strip())
    await message.answer("üíº –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
    await state.set_state(Registration.position)

@dp.message(Registration.position)
async def process_position(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text.strip())
    await message.answer("üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    await state.set_state(Registration.shop)

@dp.message(Registration.shop)
async def process_shop(message: types.Message, state: FSMContext):
    if not message.text.strip().isdigit():
        await message.answer("‚ùå –ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    data = await state.get_data()
    try:
        users_sheet.append_row([
            str(message.from_user.id),
            data['name'],
            data['surname'],
            data['position'],
            message.text.strip(),
            datetime.now().strftime("%d.%m.%Y %H:%M")
        ])
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")
        await log_error(str(message.from_user.id), str(e))

@dp.message(F.text == "üõí –ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞")
async def handle_client_order(message: types.Message, state: FSMContext):
    user_data = await get_user_data(str(message.from_user.id))
    if not user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    await state.update_data(
        shop=user_data['shop'],
        user_name=user_data['name'],
        user_position=user_data['position']
    )
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderStates.article_input)

@dp.message(OrderStates.article_input)
async def process_article(message: types.Message, state: FSMContext):
    article = message.text.strip()
    data = await state.get_data()
    try:
        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –º–∞–≥–∞–∑–∏–Ω—É
        unique_key = f"{article}{data['shop']}"
        cell = gamma_cluster_sheet.find(unique_key)
        if not cell:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞
        product_row = gamma_cluster_sheet.row_values(cell.row)
        product_data = dict(zip(gamma_cluster_sheet.row_values(1), product_row))
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier_id = str(product_data["–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç."]).strip()
        supplier_sheet = get_supplier_dates_sheet(data['shop'])
        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø–æ supplier_id
        supplier_cell = supplier_sheet.find(supplier_id)
        if not supplier_cell:
            raise ValueError("–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier_row = supplier_sheet.row_values(supplier_cell.row)
        supplier_data = parse_supplier_data(dict(zip(supplier_sheet.row_values(1), supplier_row)))
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã
        order_date, delivery_date = calculate_delivery_date(supplier_data)
        await state.update_data(
            article=article,
            product_name=product_data['–ù–∞–∑–≤–∞–Ω–∏–µ'],
            department=product_data['–û—Ç–¥–µ–ª'],
            order_date=order_date,
            delivery_date=delivery_date,
            supplier_id=supplier_id,
            supplier_name=supplier_data['supplier_name']
        )
        await message.answer(
            f"–ú–∞–≥–∞–∑–∏–Ω: {data['shop']}\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {article}\n"
            f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product_data['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order_date}\n"
            f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}\n"
            f"üè≠ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_data['supplier_name']}"
        )
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(OrderStates.quantity_input)
    except Exception as e:
        await log_error(message.from_user.id, f"Article {article}: {str(e)}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(OrderStates.quantity_input)
async def process_quantity(message: types.Message, state: FSMContext):
    if not message.text.strip().isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    data = await state.get_data()
    await state.update_data(quantity=int(message.text.strip()))
    # –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—ã
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—É:")
    await state.set_state(OrderStates.order_reason_input)

@dp.message(OrderStates.order_reason_input)
async def process_order_reason(message: types.Message, state: FSMContext):
    data = await state.get_data()
    order_reason = message.text.strip()
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(order_reason=order_reason)
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await message.answer(
        f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {data['article']}\n"
        f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {data['product_name']}\n"
        f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {data['order_date']}\n"
        f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_date']}\n"
        f"üè≠ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_data['supplier_name']}"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞/–ü—Ä–∏—á–∏–Ω–∞: {order_reason}\n",
        reply_markup=confirm_keyboard()
    )
    await state.set_state(OrderStates.confirmation)

@dp.message(OrderStates.confirmation, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def final_confirmation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        department_sheet = orders_spreadsheet.worksheet(data['department'])
        next_row = len(department_sheet.col_values(1)) + 1
        # –°–û–ó–î–ê–Å–ú –°–ü–ò–°–û–ö –û–ë–ù–û–í–õ–ï–ù–ò–ô
        updates = [
            {'range': f'A{next_row}', 'values': [[data['shop']]]},          # –ú–∞–≥–∞–∑–∏–Ω
            {'range': f'B{next_row}', 'values': [[data['article']]]},       # –ê—Ä—Ç–∏–∫—É–ª
            {'range': f'C{next_row}', 'values': [[data['order_reason']]]},  # –ü—Ä–∏—á–∏–Ω–∞/–ù–æ–º–µ—Ä
            {'range': f'D{next_row}', 'values': [[datetime.now().strftime("%d.%m.%Y %H:%M")]]},  # –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞
            {'range': f'E{next_row}', 'values': [[f"{data['user_name']}, {data['user_position']}"]]},  # –ò–º—è/–î–æ–ª–∂–Ω–æ—Å—Ç—å
            {'range': f'K{next_row}', 'values': [[str(data['quantity'])]]},  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            {'range': f'R{next_row}', 'values': [[str(message.from_user.id)]]},  # Chat ID
        ]
        # –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –í–°–ï–• –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ü–û–õ–Ø–•
        required_fields = ['shop', 'article', 'order_reason', 'quantity']
        for field in required_fields:
            if not data.get(field):
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
        # –ü–†–û–ú–ï–©–ê–ï–ú –í–°–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í –û–î–ò–ù –ó–ê–ü–†–û–°
        department_sheet.batch_update(updates)
        await message.answer("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=main_menu_keyboard())
        await state.clear()
    except Exception as e:
        await log_error(message.from_user.id, f"Save Error: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

@dp.message(OrderStates.confirmation, F.text == "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
async def correct_quantity(message: types.Message, state: FSMContext):
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderStates.quantity_input)


@dp.message(OrderStates.confirmation, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_order(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
    await state.clear()


@dp.message(F.text == "üìã –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
async def handle_info_request(message: types.Message, state: FSMContext):
    user_data = await get_user_data(str(message.from_user.id))
    if not user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    await state.update_data(
        shop=user_data['shop'],
        user_name=user_data['name'],
        user_position=user_data['position']
    )
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderStates.article_input_info)

@dp.message(OrderStates.article_input_info)
async def process_article_info(message: types.Message, state: FSMContext):
    article = message.text.strip()
    data = await state.get_data()
    try:
        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –º–∞–≥–∞–∑–∏–Ω—É
        unique_key = f"{article}{data['shop']}"
        cell = gamma_cluster_sheet.find(unique_key)
        if not cell:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞
        product_row = gamma_cluster_sheet.row_values(cell.row)
        product_data = dict(zip(gamma_cluster_sheet.row_values(1), product_row))
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier_id = str(product_data["–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç."]).strip()
        supplier_sheet = get_supplier_dates_sheet(data['shop'])
        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø–æ supplier_id
        supplier_cell = supplier_sheet.find(supplier_id)
        if not supplier_cell:
            raise ValueError("–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier_row = supplier_sheet.row_values(supplier_cell.row)
        supplier_data = parse_supplier_data(dict(zip(supplier_sheet.row_values(1), supplier_row)))
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã
        order_date, delivery_date = calculate_delivery_date(supplier_data)
        await state.update_data(
            article=article,
            product_name=product_data['–ù–∞–∑–≤–∞–Ω–∏–µ'],
            department=product_data['–û—Ç–¥–µ–ª'],
            order_date=order_date,
            delivery_date=delivery_date,
            supplier_id=supplier_id
        )
        await message.answer(
            f"–ú–∞–≥–∞–∑–∏–Ω: {data['shop']}\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {article}\n"
            f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product_data['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order_date}\n"
            f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}\n"
            f"üè≠ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_data['supplier_name']}"
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=make_order_keyboard())
    except Exception as e:
        await log_error(message.from_user.id, f"Article {article}: {str(e)}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(F.text == "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", OrderStates.article_input_info)
async def make_order_from_info(message: types.Message, state: FSMContext):
    data = await state.get_data()
    article = data.get('article')
    if not article:
        await message.answer("–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(quantity=None)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(OrderStates.quantity_input)

@dp.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", OrderStates.article_input_info)
async def go_to_main_menu_from_info(message: types.Message, state: FSMContext):
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
    await state.clear()

@dp.message(OrderStates.order_reason_input)
async def process_order_reason(message: types.Message, state: FSMContext):
    data = await state.get_data()
    order_reason = message.text.strip()
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(order_reason=order_reason)
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await message.answer(
        f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {data['article']}
"
        f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {data['product_name']}
"
        f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {data['order_date']}
"
        f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_date']}
"
        f"üè≠ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {data['supplier_name']}
"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}
"
        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞/–ü—Ä–∏—á–∏–Ω–∞: {order_reason}
",
        reply_markup=confirm_keyboard()
    )
    await state.set_state(OrderStates.confirmation)

@dp.message(F.text == "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞")
async def handle_stock_check(message: types.Message):
    await message.answer("üõ†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–ï–ë–•–£–ö–û–í =====================
async def on_startup(app):
    await bot.set_webhook(url=WEBHOOK_URL)
    logging.info(f"Webhook URL: {WEBHOOK_URL}")

async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.session.close()

async def handle_webhook(request):
    try:
        data = await request.json()
        chat_id = data.get('chat_id')
        text = data.get('text')
        if not chat_id or not text:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–µ–±—Ö—É–∫–µ")
        await bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)
        return web.Response(text="Ok", status=200)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        return web.Response(text="Error", status=500)

# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–ü–ü–õ–ò–ö–ê–¶–ò–ò –û–î–ò–ù –†–ê–ó
app = web.Application()
app.router.add_post(WEBHOOK_PATH, handle_webhook)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

@dp.message(lambda message: 'order_update' in message.text)
async def send_order_notification(message: types.Message):
    try:
        data = message.text.split('\n')
        chat_id = data[1]
        order_info = '\n'.join(data[2:])
        await bot.send_message(chat_id=chat_id, text=order_info, parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    async def main():
        await dp.start_polling(bot, skip_updates=True)
    import asyncio
    asyncio.run(main())
