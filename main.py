import os
import json
from cachetools import TTLCache
from typing import Dict, Any
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.exceptions import TelegramForbiddenError
from contextlib import suppress
from google.oauth2.service_account import Credentials
import gspread
from gspread.exceptions import APIError, SpreadsheetNotFound
from aiohttp import web
import logging
import asyncio


# ===================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ï–†–í–ò–°–ù–û–ì–û –†–ï–ñ–ò–ú–ê =====================
SERVICE_MODE = False
ADMINS = [122086799]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# ===================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–≠–®–ê =====================
CACHE_TTL = 43200  # 12 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
cache = TTLCache(maxsize=1000, ttl=CACHE_TTL)

# ===================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====================
from dotenv import load_dotenv

load_dotenv('secret.env')  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
try:
    BOT_TOKEN = os.environ['BOT_TOKEN']
    GOOGLE_CREDS_JSON = os.environ['GOOGLE_CREDENTIALS']
except KeyError as e:
    raise RuntimeError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º GOOGLE_CREDENTIALS –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç
GOOGLE_CREDS = json.loads(GOOGLE_CREDS_JSON)
SPREADSHEET_NAME = "ShopBotData"
ORDERS_SPREADSHEET_NAME = "–ö–æ–ø–∏—è –ó–∞–∫–∞–∑—ã –ú–ó 0.2"
USERS_SHEET_NAME = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
GAMMA_CLUSTER_SHEET = "–ì–∞–º–º–∞ –∫–ª–∞—Å—Ç–µ—Ä"
LOGS_SHEET = "–õ–æ–≥–∏"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST')  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://your-bot.render.com
WEBHOOK_PATH = "/webhook"  # –ü—É—Ç—å –¥–ª—è –≤–µ–±-—Ö—É–∫–∞
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"



# ===================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====================
credentials = Credentials.from_service_account_info(
    GOOGLE_CREDS,
    scopes=['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
)
client = gspread.authorize(credentials)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
try:
    main_spreadsheet = client.open(SPREADSHEET_NAME)
    users_sheet = main_spreadsheet.worksheet(USERS_SHEET_NAME)
    logs_sheet = main_spreadsheet.worksheet(LOGS_SHEET)
    orders_spreadsheet = client.open(ORDERS_SPREADSHEET_NAME)
    gamma_cluster_sheet = orders_spreadsheet.worksheet(GAMMA_CLUSTER_SHEET)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
    exit()

# ===================== –°–û–°–¢–û–Ø–ù–ò–Ø FSM =====================
class Registration(StatesGroup):
    name = State()
    surname = State()
    position = State()
    shop = State()


class OrderStates(StatesGroup):
    article_input = State()
    quantity_input = State()
    confirmation = State()
    order_reason_input = State()


# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ö–õ–ê–°–° =====================
class FakeSheet:
    """–ò–º–∏—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –ª–∏—Å—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    def __init__(self, data):
        self.data = data
        self.headers = list(data[0].keys()) if data else []
    
    def find(self, value):
        for idx, row in enumerate(self.data):
            if str(value) in row.values():
                return type('Cell', (), {'row': idx + 2})  # –≠–º—É–ª–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —è—á–µ–π–∫–∏
        raise gspread.exceptions.CellNotFound(value)
    
    def row_values(self, row):
        return list(self.data[row-2].values()) if row-2 < len(self.data) else []
    
    def get_all_records(self):
        return self.data

# ===================== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====================
def main_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìã –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    builder.button(text="üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞")
    builder.button(text="üõí –ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞")
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)


def article_input_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    return builder.as_markup(resize_keyboard=True)


def confirm_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
    builder.button(text="‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)


# ===================== –°–ï–†–í–ò–°–ù–´–ô –†–ï–ñ–ò–ú =====================
async def notify_admins(message: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    for admin_id in ADMINS:
        with suppress(TelegramForbiddenError):
            await bot.send_message(admin_id, message)

async def broadcast(message: str):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    users = users_sheet.col_values(1)[1:]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ A
    for user_id in users:
        with suppress(TelegramForbiddenError, ValueError):
            await bot.send_message(int(user_id), message)

async def toggle_service_mode(enable: bool):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    global SERVICE_MODE
    SERVICE_MODE = enable
    status = "–í–ö–õ–Æ–ß–ï–ù" if enable else "–í–´–ö–õ–Æ–ß–ï–ù"
    await notify_admins(f"üõ† –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º {status}")




# ===================== –°–ò–°–¢–ï–ú–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø =====================
def validate_cache_keys():
    required_keys = ['users', 'gamma_cluster']
    for key in required_keys:
        if key not in cache:
            raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞: {key}")


async def preload_cache():
    """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    print("‚ôªÔ∏è –ù–∞—á–∞–ª–æ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞...")
    
    # –ö—ç—à–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await cache_sheet_data(users_sheet, "users")  # –ü–µ—Ä–µ–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –ª–∏—Å—Ç–∞ –∏ –∫–ª—é—á –∫—ç—à–∞
    await cache_sheet_data(gamma_cluster_sheet, "gamma_cluster")
    
    
    # –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    shops = users_sheet.col_values(5)[1:]  # –ë–µ—Ä–µ–º –Ω–æ–º–µ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ E
    for shop in set(shops):
        await cache_supplier_data(shop)
    
    print(f"‚úÖ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω. –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(cache)}")
    validate_cache_keys()



async def preload_cache():
    """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    startup_msg = "‚ôªÔ∏è –ù–∞—á–∞–ª–æ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞..."
    print(startup_msg)
    await notify_admins(startup_msg)
    
    try:
        # –ö—ç—à–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await cache_sheet_data(users_sheet, "users")
        await cache_sheet_data(gamma_cluster_sheet, "gamma_cluster")
        
        # –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
        shops = users_sheet.col_values(5)[1:]
        for shop in set(shops):
            await cache_supplier_data(shop)
        
        complete_msg = f"‚úÖ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω. –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(cache)}"
        print(complete_msg)
        await notify_admins(complete_msg)
        validate_cache_keys()
        
    except Exception as e:
        error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {str(e)}"
        print(error_msg)
        await notify_admins(error_msg)
        raise




# ===================== –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–û–í =====================
@dp.message(F.text == "/maintenance_on")
async def maintenance_on(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    
    await toggle_service_mode(True)
    await broadcast("üîß –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
    await message.answer("–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

@dp.message(F.text == "/maintenance_off")
async def maintenance_off(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    
    await toggle_service_mode(False)
    await broadcast("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ë–æ—Ç —Å–Ω–æ–≤–∞ –≤ —Ä–∞–±–æ—Ç–µ.")
    await message.answer("–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")


# ===================== –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ò–î–õ–í–ê–† =====================
@dp.update.middleware()
async def service_mode_middleware(handler, event, data):
    if SERVICE_MODE and event.message:
        with suppress(TelegramForbiddenError):
            await event.message.answer("‚è≥ –ë–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    return await handler(event, data)



# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================
async def get_user_data(user_id: str) -> Dict[str, Any]:
    cache_key = f"user_{user_id}"
    if cache_key in cache:
        return cache[cache_key]
    
    try:
        cell = users_sheet.find(user_id)
        user_data = {
            'shop': users_sheet.cell(cell.row, 5).value,
            'name': users_sheet.cell(cell.row, 2).value,
            'surname': users_sheet.cell(cell.row, 3).value,
            'position': users_sheet.cell(cell.row, 4).value
        }
        cache[cache_key] = user_data
        return user_data
    except:
        return None


async def log_error(user_id: str, error: str):
    logs_sheet.append_row([
        datetime.now().strftime("%d.%m.%Y %H:%M"),
        user_id,
        "ERROR",
        error
    ])


def get_supplier_dates_sheet(shop_number: str):
    cache_key = f"supplier_{shop_number}"
    if cache_key in cache:
        return FakeSheet(cache[cache_key])
    
    sheet = orders_spreadsheet.worksheet(f"–î–∞—Ç—ã –≤—ã—Ö–æ–¥–æ–≤ –∑–∞–∫–∞–∑–æ–≤ {shop_number}")
    data = sheet.get_all_records()
    cache[cache_key] = data
    return FakeSheet(data)


def calculate_delivery_date(supplier_data: dict) -> tuple:
    today = datetime.now()
    current_weekday = today.isoweekday()

    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞
    nearest_day = None
    for day in sorted(supplier_data['order_days']):
        if day >= current_weekday:
            nearest_day = day
            break
    if not nearest_day:
        nearest_day = min(supplier_data['order_days'])
    delta_days = (nearest_day - current_weekday) % 7
    order_date = today + timedelta(days=delta_days)

    # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –ø–æ—Å—Ç–∞–≤–∫–∏
    delivery_date = order_date + timedelta(days=supplier_data['delivery_days'])
    return (
        order_date.strftime("%d.%m.%Y"),
        delivery_date.strftime("%d.%m.%Y")
    )


# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====================
@dp.message(F.text == "/start")
async def start_handler(message: types.Message, state: FSMContext):
    user_data = await get_user_data(str(message.from_user.id))
    if user_data:
        await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=main_menu_keyboard())
        return
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(Registration.name)


@dp.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Registration.surname)


@dp.message(Registration.surname)
async def process_surname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text.strip())
    await message.answer("üíº –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
    await state.set_state(Registration.position)


@dp.message(Registration.position)
async def process_position(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text.strip())
    await message.answer("üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –Ω—É–ª–µ–π):")
    await state.set_state(Registration.shop)


@dp.message(Registration.shop)
async def process_shop(message: types.Message, state: FSMContext):
    if not message.text.strip().isdigit():
        await message.answer("‚ùå –ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    data = await state.get_data()
    try:
        users_sheet.append_row([
            str(message.from_user.id),
            data['name'],
            data['surname'],
            data['position'],
            message.text.strip(),
            datetime.now().strftime("%d.%m.%Y %H:%M")
        ])
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")
        await log_error(str(message.from_user.id), str(e))


@dp.message(F.text == "üõí –ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞")
async def handle_client_order(message: types.Message, state: FSMContext):
    user_data = await get_user_data(str(message.from_user.id))
    if not user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    await state.update_data(
        shop=user_data['shop'],
        user_name=user_data['name'],
        user_position=user_data['position']
    )
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderStates.article_input)


@dp.message(OrderStates.article_input)
async def process_article(message: types.Message, state: FSMContext):
    article = message.text.strip()
    data = await state.get_data()
    user_shop = data['shop']
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ gamma_cluster
        gamma_data = cache.get("gamma_cluster", [])
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –∫—ç—à–µ
        product_data = next(
            (item for item in gamma_data 
             if str(item.get("–ê—Ä—Ç–∏–∫—É–ª")) == article 
             and str(item.get("–ú–∞–≥–∞–∑–∏–Ω")) == user_shop),
            None
        )
        
        if not product_data:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –∫—ç—à–∞
        supplier_id = str(product_data.get("–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.", "")).strip()
        supplier_sheet = get_supplier_dates_sheet(user_shop)
        
        # –ò—â–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        supplier_data = next(
            (item for item in supplier_sheet.data 
             if str(item.get("–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.", "")).strip() == supplier_id),
            None
        )
        
        if not supplier_data:
            raise ValueError("–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        parsed_supplier = parse_supplier_data(supplier_data)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã
        order_date, delivery_date = calculate_delivery_date(parsed_supplier)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            article=article,
            product_name=product_data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''),
            department=product_data.get('–û—Ç–¥–µ–ª', ''),
            order_date=order_date,
            delivery_date=delivery_date,
            supplier_id=supplier_id
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = (
            f"–ú–∞–≥–∞–∑–∏–Ω: {user_shop}\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {article}\n"
            f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product_data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '')}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order_date}\n"
            f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}\n"
        )
        
        await message.answer(response)
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(OrderStates.quantity_input)

    except StopIteration:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
    except ValueError as ve:
        await log_error(message.from_user.id, f"Value Error: {str(ve)}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(ve)}")
    except Exception as e:
        await log_error(message.from_user.id, f"Unexpected error: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")


def parse_supplier_data(record):
    order_days = []
    for key in ['–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞', '–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ 2', '–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ 3']:
        value = record.get(key, '').strip()
        if value and value.isdigit():
            order_days.append(int(value))
    
    delivery_days = record.get('–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω', '0').strip()
    return {
        'supplier_id': record.get('–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.', ''),
        'order_days': sorted(list(set(order_days))),  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        'delivery_days': int(delivery_days) if delivery_days.isdigit() else 0
    }


@dp.message(OrderStates.quantity_input)
async def process_quantity(message: types.Message, state: FSMContext):
    if not message.text.strip().isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    data = await state.get_data()
    await state.update_data(quantity=int(message.text.strip()))
    # –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—ã
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—É:")
    await state.set_state(OrderStates.order_reason_input)


@dp.message(OrderStates.order_reason_input)
async def process_order_reason(message: types.Message, state: FSMContext):
    data = await state.get_data()
    order_reason = message.text.strip()
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(order_reason=order_reason)
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await message.answer(
        f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {data['article']}\n"
        f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {data['product_name']}\n"
        f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {data['order_date']}\n"
        f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_date']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞/–ü—Ä–∏—á–∏–Ω–∞: {order_reason}\n",
        reply_markup=confirm_keyboard()
    )
    await state.set_state(OrderStates.confirmation)


@dp.message(OrderStates.confirmation, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def final_confirmation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        department_sheet = orders_spreadsheet.worksheet(data['department'])
        next_row = len(department_sheet.col_values(1)) + 1
        # –°–û–ó–î–ê–Å–ú –°–ü–ò–°–û–ö –û–ë–ù–û–í–õ–ï–ù–ò–ô
        updates = [
            {'range': f'A{next_row}', 'values': [[data['shop']]]},          # –ú–∞–≥–∞–∑–∏–Ω
            {'range': f'B{next_row}', 'values': [[data['article']]]},       # –ê—Ä—Ç–∏–∫—É–ª
            {'range': f'C{next_row}', 'values': [[data['order_reason']]]},  # –ü—Ä–∏—á–∏–Ω–∞/–ù–æ–º–µ—Ä
            {'range': f'D{next_row}', 'values': [[datetime.now().strftime("%d.%m.%Y %H:%M")]]},  # –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞
            {'range': f'E{next_row}', 'values': [[f"{data['user_name']}, {data['user_position']}"]]},  # –ò–º—è/–î–æ–ª–∂–Ω–æ—Å—Ç—å
            {'range': f'K{next_row}', 'values': [[str(data['quantity'])]]},  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            {'range': f'R{next_row}', 'values': [[str(message.from_user.id)]]},  # Chat ID
        ]
        # –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –í–°–ï–• –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ü–û–õ–Ø–•
        required_fields = ['shop', 'article', 'order_reason', 'quantity']
        for field in required_fields:
            if not data.get(field):
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
        # –ü–†–û–ú–ï–©–ê–ï–ú –í–°–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í –û–î–ò–ù –ó–ê–ü–†–û–°
        department_sheet.batch_update(updates)
        await message.answer("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=main_menu_keyboard())
        await state.clear()
    except Exception as e:
        await log_error(message.from_user.id, f"Save Error: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")


@dp.message(OrderStates.confirmation, F.text == "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
async def correct_quantity(message: types.Message, state: FSMContext):
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderStates.quantity_input)


@dp.message(OrderStates.confirmation, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_order(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard())


@dp.message(OrderStates.article_input, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@dp.message(OrderStates.quantity_input, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@dp.message(OrderStates.order_reason_input, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_order_process(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())


@dp.message(F.text == "üìã –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
async def handle_info_request(message: types.Message):
    await message.answer("üõ†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


@dp.message(F.text == "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞")
async def handle_stock_check(message: types.Message):
    await message.answer("üõ†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


@dp.message(F.text == "/reload_cache")
async def reload_cache_command(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    
    try:
        await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫—ç—à–∞...")
        await preload_cache()
        await message.answer("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {str(e)}")


# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–ï–ë–•–£–ö–û–í =====================
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    startup_msg = "üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"
    print(startup_msg)
    await notify_admins(startup_msg)
    
    try:
        await preload_cache()
    except Exception as e:
        await notify_admins(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
        raise

async def on_shutdown(app):
    shutdown_msg = "üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    print(shutdown_msg)
    await notify_admins(shutdown_msg)
    await bot.delete_webhook()


async def handle_webhook(request):
    update = types.Update(**await request.json())
    await dp.feed_update(bot=bot, update=update)
    return web.Response(text="Ok", status=200)


# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–ü–ü–õ–ò–ö–ê–¶–ò–ò –û–î–ò–ù –†–ê–ó
app = web.Application()
app.router.add_post(WEBHOOK_PATH, handle_webhook)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)


@dp.message(lambda message: 'order_update' in message.text)
async def send_order_notification(message: types.Message):
    try:
        data = message.text.split('\n')
        chat_id = data[1]
        order_info = '\n'.join(data[2:])
        await bot.send_message(chat_id=chat_id, text=order_info, parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")


if __name__ == "__main__":
    async def main():
        await dp.start_polling(bot, skip_updates=True)

    import asyncio
    asyncio.run(main())
