import os
import json
import pickle
import io 
import re
import gc
import asyncio
import logging
import traceback
import time
import threading
import tracemalloc
import objgraph
import psutil
import sqlite3
from contextlib import contextmanager
from aiogram.exceptions import TelegramBadRequest
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove, File, BufferedInputFile
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import Command
from contextlib import suppress
from google.oauth2.service_account import Credentials
import gspread
from gspread.exceptions import APIError, SpreadsheetNotFound
from cachetools import LRUCache



# ===================== –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö =====================
from aiogram.fsm.storage.base import StorageKey

@contextmanager
def get_db_connection():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite."""
    conn = None
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ë–î
        if not os.path.exists(DB_PATH):
             # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
             logging.critical(f"‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {DB_PATH}")
             raise FileNotFoundError(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {DB_PATH}")
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∫–æ–ª–æ–Ω–∫–∞–º –ø–æ –∏–º–µ–Ω–∏
        yield conn
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        if conn:
            conn.rollback()
        raise
    finally:
        if conn:
            conn.close()

async def global_error_handler(event: types.ErrorEvent, bot: Bot):
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    exception = event.exception
    update = event.update
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = None
    if update.message:
        user_id = update.message.from_user.id
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    error_type = type(exception).__name__
    error_message = str(exception) or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
    traceback_str = "".join(traceback.format_exception(type(exception), exception, exception.__traceback__))
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    logging.critical(
        f"–ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê [user:{user_id}]\n"
        f"Type: {error_type}\n"
        f"Message: {error_message}\n"
        f"Traceback:\n{traceback_str}"
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
    if user_id:
        try:
            logs_sheet.append_row([
                datetime.now().strftime("%d.%m.%Y %H:%M"),
                str(user_id),
                "CRITICAL_ERROR",
                f"{error_type}: {error_message[:200]}"
            ])
        except Exception as log_ex:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(log_ex)}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                admin_id,
                f"üö® <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                f"‚Ä¢ –¢–∏–ø: {error_type}\n"
                f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}\n\n"
                f"<code>{traceback_str[:3500]}</code>",
                parse_mode=ParseMode.HTML
            )
        except Exception:
            pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if user_id:
        try:
            await bot.send_message(
                user_id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                reply_markup=ReplyKeyboardRemove()
            )
        except Exception:
            pass
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id:
        try:
            state = FSMContext(
                storage=dp.storage,
                key=StorageKey(
                    bot_id=bot.id,
                    chat_id=user_id,
                    user_id=user_id
                )
            )
            await state.clear()
        except Exception:
            pass
    
    return True



# ===================== –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï –ü–ê–ú–Ø–¢–ò =====================

def init_tracemalloc():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –ø–∞–º—è—Ç–∏"""
    if not tracemalloc.is_tracing():
        tracemalloc.start()
        logging.info("Tracemalloc initialized")




async def memory_monitor():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    if not tracemalloc.is_tracing():
        tracemalloc.start(10)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
    
    cycle_count = 0
    prev_snapshot = None
    
    while True:
        try:
            process = psutil.Process()
            mem_info = process.memory_info()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            logging.info(
                f"Memory: RSS={mem_info.rss / 1024 / 1024:.2f}MB, "
                f"VMS={mem_info.vms / 1024 / 1024:.2f}MB"
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ –ø–∞–º—è—Ç–∏
            snapshot = tracemalloc.take_snapshot()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
            top_stats = snapshot.statistics('lineno')[:5]
            for i, stat in enumerate(top_stats):
                logging.info(
                    f"Alloc {i+1}: {stat.size / 1024:.2f}KB in {stat.count} blocks "
                    f"at {stat.traceback.format()[-1]}"
                )
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            cycle_count += 1
            if cycle_count >= 10:  # –ö–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
                # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
                logging.info("Most common object types:")
                common_types = objgraph.most_common_types(limit=10)
                for obj_type, count in common_types:
                    logging.info(f"  {obj_type}: {count}")
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –ø–∞–º—è—Ç–∏
                if prev_snapshot:
                    diff_stats = snapshot.compare_to(prev_snapshot, 'lineno')
                    growth_stats = [stat for stat in diff_stats if stat.size_diff > 0][:5]
                    
                    if growth_stats:
                        logging.info("Top memory growth:")
                        for stat in growth_stats:
                            logging.info(
                                f"  +{stat.size_diff / 1024:.2f}KB: "
                                f"{stat.traceback.format()[-1]}"
                            )
                    else:
                        logging.info("No significant memory growth detected")
                
                # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
                cycle_count = 0
                prev_snapshot = snapshot
                gc.collect()
            
            await asyncio.sleep(1200)  # 20 –º–∏–Ω—É—Ç
            
        except Exception as e:
            logging.error(f"Memory monitor error: {str(e)}")
            await asyncio.sleep(60)


def profile_memory(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
    def wrapper(*args, **kwargs):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º tracemalloc –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if not tracemalloc.is_tracing():
            tracemalloc.start()
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        start_snapshot = tracemalloc.take_snapshot()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        result = func(*args, **kwargs)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        end_snapshot = tracemalloc.take_snapshot()
        top_stats = end_snapshot.compare_to(start_snapshot, 'lineno')
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logging.info(f"Memory profile for {func.__name__}:")
        for stat in top_stats[:5]:
            logging.info(
                f"  {stat.size_diff / 1024:.2f}KB difference, "
                f"Total: {stat.size / 1024:.2f}KB, "
                f"File: {stat.traceback.format()[-1]}"
            )
        
        return result
    return wrapper

# ===================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====================

DB_PATH = os.path.join(os.path.dirname(__file__), 'articles.db')

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
)

# –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º
SERVICE_MODE = True
ADMINS = [122086799, 5183727015]

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
CACHE_TTL = 43200  # 12 —á–∞—Å–æ–≤
cache = LRUCache(maxsize=500)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv('secret.env')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
try:
    BOT_TOKEN = os.environ['BOT_TOKEN']
    GOOGLE_CREDS_JSON = os.environ['GOOGLE_CREDENTIALS']
except KeyError as e:
    raise RuntimeError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {e}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets
GOOGLE_CREDS = json.loads(GOOGLE_CREDS_JSON)
SPREADSHEET_NAME = "ShopBotData"
STATSS_SHEET_NAME = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
ORDERS_SPREADSHEET_NAME = "–ö–æ–ø–∏—è –ó–∞–∫–∞–∑—ã –ú–ó 0.2"
USERS_SHEET_NAME = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
GAMMA_CLUSTER_SHEET = "–ì–∞–º–º–∞ –∫–ª–∞—Å—Ç–µ—Ä"
TASKS_SHEET_NAME = "–ó–∞–¥–∞—á–∏"
LOGS_SHEET = "–õ–æ–≥–∏"
MAX_IMAGE_SIZE = 2_000_000
MAX_WORKERS = 4

# ===================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====================
credentials = Credentials.from_service_account_info(
    GOOGLE_CREDS,
    scopes=['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
)
client = gspread.authorize(credentials)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
dp.errors.register(global_error_handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
try:
    main_spreadsheet = client.open(SPREADSHEET_NAME)
    users_sheet = main_spreadsheet.worksheet(USERS_SHEET_NAME)
    logs_sheet = main_spreadsheet.worksheet(LOGS_SHEET)
    orders_spreadsheet = client.open(ORDERS_SPREADSHEET_NAME)
    gamma_cluster_sheet = orders_spreadsheet.worksheet(GAMMA_CLUSTER_SHEET)
    print("‚úÖ Google Sheets —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {str(e)}")
    exit()


# ===================== –°–û–°–¢–û–Ø–ù–ò–Ø FSM =====================
class Registration(StatesGroup):
    name = State()
    surname = State()
    position = State()
    shop = State()

class OrderStates(StatesGroup):
    article_input = State()
    shop_selection = State()
    shop_input = State()
    quantity_input = State()
    order_reason_input = State()
    confirmation = State()

class InfoRequest(StatesGroup):
    article_input = State()

class AdminBroadcast(StatesGroup):
    message_input = State()
    target_selection = State()
    manual_ids = State()
    confirmation = State()

class TaskStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
    add_text = State()
    add_link = State()
    add_deadline = State()
    
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
    delete_task = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á
    select_action = State()  # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    select_tasks = State()   # –í—ã–±–æ—Ä –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    input_task_ids = State() # –í–≤–æ–¥ ID –∑–∞–¥–∞—á –≤—Ä—É—á–Ω—É—é
    select_audience = State() # –í—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    input_position = State()
    input_manual_ids = State() # –í–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    confirmation = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    view_stats = State()     # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    input_task_id_for_details = State() # –í–≤–æ–¥ ID –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏


# ===================== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====================
def create_keyboard(buttons: List[str], sizes: tuple, resize=True, one_time=False) -> types.ReplyKeyboardMarkup:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    builder = ReplyKeyboardBuilder()
    for button in buttons:
        builder.button(text=button)
    builder.adjust(*sizes)
    return builder.as_markup(
        resize_keyboard=resize,
        one_time_keyboard=one_time
    )

def main_menu_keyboard(user_id: int = None) -> types.ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤"""
    buttons = ["üìã –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞", "üõí –ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞"]
    if user_id and user_id in ADMINS:
        buttons.append("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    return create_keyboard(buttons, (2, 1, 1))

def article_input_keyboard() -> types.ReplyKeyboardMarkup:
    return create_keyboard(
        [ "‚ùå –û—Ç–º–µ–Ω–∞"],
        (1)
    )

def shop_selection_keyboard() -> types.ReplyKeyboardMarkup:
    return create_keyboard(
        ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–π –º–∞–≥–∞–∑–∏–Ω", "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π", "‚ùå –û—Ç–º–µ–Ω–∞"],
        (2, 1)
    )

def confirm_keyboard() -> types.ReplyKeyboardMarkup:
    return create_keyboard(
        ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "‚ùå –û—Ç–º–µ–Ω–∞"],
        (2, 1)
    )

def admin_panel_keyboard() -> types.ReplyKeyboardMarkup:
    return create_keyboard(
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à", "üîß –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º", "üìä –î–∞–º–ø –ø–∞–º—è—Ç–∏", "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
        (3, 2, 2)
    )

def service_mode_keyboard() -> types.ReplyKeyboardMarkup:
    return create_keyboard(
        ["üü¢ –í–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º", "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º", "üîô –ù–∞–∑–∞–¥"],
        (2, 1)
    )

def cancel_keyboard() -> types.ReplyKeyboardMarkup:
    return create_keyboard(["‚ùå –û—Ç–º–µ–Ω–∞"], (1,))


def broadcast_target_keyboard():
    return create_keyboard(
        ["–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", "–ü–æ –º–∞–≥–∞–∑–∏–Ω–∞–º", "–ü–æ –æ—Ç–¥–µ–ª–∞–º", "–í—Ä—É—á–Ω—É—é", "‚ùå –û—Ç–º–µ–Ω–∞"],
        (2, 2, 1)
    )

def broadcast_confirmation_keyboard():
    return create_keyboard(
        ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "‚ùå –û—Ç–º–µ–Ω–∞"],
        (2,)
    )

def tasks_admin_keyboard() -> types.ReplyKeyboardMarkup:
    return create_keyboard(
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"],
        (2, 2, 1)
    )

def get_task_keyboard(task_id: str) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", 
        callback_data=f"task_done:{task_id}"
    )
    return builder.as_markup()

# ===================== –°–ï–†–í–ò–°–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================
async def notify_admins(message: str) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    for admin_id in ADMINS:
        with suppress(TelegramForbiddenError):
            await bot.send_message(admin_id, message)

async def toggle_service_mode(enable: bool) -> None:
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    global SERVICE_MODE
    SERVICE_MODE = enable
    status = "–í–ö–õ–Æ–ß–ï–ù" if enable else "–í–´–ö–õ–Æ–ß–ï–ù"
    await notify_admins(f"üõ† –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º {status}")

async def get_user_data(user_id: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        cache_key = f"user_{user_id}"
        if cache_key in cache:
            user_data = cache[cache_key]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if all(key in user_data for key in ['shop', 'name', 'position']):
                return user_data
            else:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
                cache.pop(cache_key, None)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
        users_records = pickle.loads(cache.get("users_data", b""))
        if not users_records:
            users_records = users_sheet.get_all_records()
            cache["users_data"] = pickle.dumps(users_records)
        
        for user in users_records:
            if str(user.get("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "")).strip() == str(user_id).strip():
                user_data = {
                    'shop': user.get("–ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞", "") or "–ù–µ —É–∫–∞–∑–∞–Ω",
                    'name': user.get("–ò–º—è", "") or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    'surname': user.get("–§–∞–º–∏–ª–∏—è", "") or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    'position': user.get("–î–æ–ª–∂–Ω–æ—Å—Ç—å", "") or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                }
                cache[cache_key] = user_data
                return user_data
        
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        return None


async def log_error(user_id: str, error: str) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    try:
        logs_sheet.append_row([
            datetime.now().strftime("%d.%m.%Y %H:%M"),
            user_id,
            "ERROR",
            error
        ])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

async def log_user_activity(user_id: str, command: str, event_type: str = "command") -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_data = await get_user_data(str(user_id))
        if not user_data:
            return
            
        record = [
            datetime.now().strftime("%d.%m.%Y"),
            datetime.now().strftime("%H:%M:%S"),
            str(user_id),
            user_data.get('name', ''),
            user_data.get('surname', ''),
            user_data.get('position', ''),
            user_data.get('shop', ''),
            command,
            event_type
        ]
        
        stats_sheet = main_spreadsheet.worksheet(STATSS_SHEET_NAME)
        stats_sheet.append_row(record)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}")




##–ó–∞–¥–∞—á–∏\\\\\\\\\\\\\\\\\
def normalize_task_row(task_id: str, row: dict) -> dict:
    return {
        "text": row.get("–¢–µ–∫—Å—Ç", ""),
        "creator_initials": row.get("–ò–Ω–∏—Ü–∏–∞–ª—ã", ""),
        "deadline": row.get("–î–µ–¥–ª–∞–π–Ω", ""),
        "link": row.get("–°—Å—ã–ª–∫–∞", ""),
        "statuses": row.get("–°—Ç–∞—Ç—É—Å—ã", ""),
    }


def get_tasks_sheet():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏—Å—Ç —Å –∑–∞–¥–∞—á–∞–º–∏"""
    return main_spreadsheet.worksheet(TASKS_SHEET_NAME)

async def get_user_initials(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ò.–ò–≤–∞–Ω–æ–≤')"""
    user_data = await get_user_data(str(user_id))
    if not user_data:
        return "–ê–Ω–æ–Ω–∏–º"
    name = user_data.get("name", "")
    surname = user_data.get("surname", "")
    return f"{name}.{surname}" if name else surname

async def save_task(
    task_id: str,
    text: str,
    creator_id: int,
    creator_initials: str,
    link: str = None,
    deadline: str = None
):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Google Sheets"""
    sheet = get_tasks_sheet()
    sheet.append_row([
        task_id,
        text,
        link,
        deadline,
        creator_id,
        creator_initials,
        datetime.now().strftime("%d.%m.%Y %H:%M"),
        json.dumps({"user_ids": []})  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
    ])

async def load_tasks() -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ Google Sheets"""
    sheet = get_tasks_sheet()
    tasks = {}
    for row in sheet.get_all_records():
        tasks[row["ID –∑–∞–¥–∞—á–∏"]] = {
            "text": row["–¢–µ–∫—Å—Ç"],
            "link": row["–°—Å—ã–ª–∫–∞"],
            "deadline": row["–î–µ–¥–ª–∞–π–Ω"],
            "creator_initials": row["–ò–Ω–∏—Ü–∏–∞–ª—ã"],
            "completed_by": json.loads(row["–°—Ç–∞—Ç—É—Å—ã"]).get("user_ids", [])
        }
    return tasks

async def delete_task(task_id: str, user_id: int) -> bool:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤"""
    sheet = get_tasks_sheet()
    cell = sheet.find(task_id)
    if not cell:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª—è–µ—Ç –∞–≤—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω
    task_creator_id = int(sheet.cell(cell.row, 5).value)
    if user_id != task_creator_id and user_id not in ADMINS:
        return False
    
    sheet.delete_rows(cell.row)
    return True

# =============================–ü–ê–†–°–ï–†=================================
  
def parse_supplier_data(record: dict) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    order_days = []
    for key in ['–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞', '–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ 2', '–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ 3']:
        value = str(record.get(key, '')).strip()
        if value and value.isdigit():
            order_days.append(int(value))
    
    delivery_days = str(record.get('–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω', '0')).strip()
    return {
        'supplier_id': str(record.get('–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.', '')),
        'order_days': sorted(list(set(order_days))),
        'delivery_days': int(delivery_days) if delivery_days.isdigit() else 0
    }

def calculate_delivery_date(supplier_data: dict) -> Tuple[str, str]:
    """–†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
    today = datetime.now()
    current_weekday = today.isoweekday()

    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞
    nearest_day = None
    for day in sorted(supplier_data['order_days']):
        if day >= current_weekday:
            nearest_day = day
            break
    if not nearest_day:
        nearest_day = min(supplier_data['order_days'])
    
    delta_days = (nearest_day - current_weekday) % 7
    order_date = today + timedelta(days=delta_days)
    delivery_date = order_date + timedelta(days=supplier_data['delivery_days'])
    
    return (
        order_date.strftime("%d.%m.%Y"),
        delivery_date.strftime("%d.%m.%Y")
    )


@profile_memory
async def get_product_info(article: str, shop: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è SQLite"""
    try:
        logging.info(f"üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞: –∞—Ä—Ç–∏–∫—É–ª={article}, –º–∞–≥–∞–∑–∏–Ω={shop}")
        
        # === 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ SQLite ===
        product_data = await get_product_data_from_db(article, shop)
        
        if not product_data:
            logging.warning(f"–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: –∞—Ä—Ç–∏–∫—É–ª={article}, –º–∞–≥–∞–∑–∏–Ω={shop}")
            return None
            
        logging.info(f"–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {product_data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

        # === 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ SQLite ===
        supplier_id = str(product_data.get("–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.", "")).strip()
        logging.info(f"ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_id}")
        
        if not supplier_id:
             # –ï—Å–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
             logging.info("–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞—é –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
             return {
                 '–ê—Ä—Ç–∏–∫—É–ª': article,
                 '–ù–∞–∑–≤–∞–Ω–∏–µ': product_data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''),
                 '–û—Ç–¥–µ–ª': str(product_data.get('–û—Ç–¥–µ–ª', '')),
                 '–ú–∞–≥–∞–∑–∏–Ω': shop,
                 '–ü–æ—Å—Ç–∞–≤—â–∏–∫': '–¢–æ–≤–∞—Ä –†–¶', # –ò–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                 '–¢–æ–ø –≤ –º–∞–≥–∞–∑–∏–Ω–µ': product_data.get('–¢–æ–ø –≤ –º–∞–≥–∞–∑–∏–Ω–µ', '0')
             }

        supplier_data = await get_supplier_data_from_db(supplier_id, shop)
        
        # === 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω ===
        if not supplier_data:
            logging.info("–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            return {
                '–ê—Ä—Ç–∏–∫—É–ª': article,
                '–ù–∞–∑–≤–∞–Ω–∏–µ': product_data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''),
                '–û—Ç–¥–µ–ª': str(product_data.get('–û—Ç–¥–µ–ª', '')),
                '–ú–∞–≥–∞–∑–∏–Ω': shop,
                '–ü–æ—Å—Ç–∞–≤—â–∏–∫': '–¢–æ–≤–∞—Ä –†–¶', # –ò–ª–∏ product_data.get('–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω. –ø–æ—Å—Ç.', '–ù–µ —É–∫–∞–∑–∞–Ω–æ').strip()
                '–¢–æ–ø –≤ –º–∞–≥–∞–∑–∏–Ω–µ': product_data.get('–¢–æ–ø –≤ –º–∞–≥–∞–∑–∏–Ω–µ', '0')
            }

        # === 4. –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ —Ä–∞—Å—á–µ—Ç –¥–∞—Ç ===
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é)
        parsed_supplier = parse_supplier_data(supplier_data)
        order_date, delivery_date = calculate_delivery_date(parsed_supplier)
        
        # === 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ===
        result = {
            '–ê—Ä—Ç–∏–∫—É–ª': article,
            '–ù–∞–∑–≤–∞–Ω–∏–µ': product_data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''),
            '–û—Ç–¥–µ–ª': str(product_data.get('–û—Ç–¥–µ–ª', '')),
            '–ú–∞–≥–∞–∑–∏–Ω': shop,
            '–ü–æ—Å—Ç–∞–≤—â–∏–∫': supplier_data.get("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω. –ø–æ—Å—Ç.", "–ù–µ —É–∫–∞–∑–∞–Ω–æ").strip(),
            '–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞': order_date,
            '–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏': delivery_date,
            '–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': supplier_id,
            '–¢–æ–ø –≤ –º–∞–≥–∞–∑–∏–Ω–µ': product_data.get('–¢–æ–ø –≤ –º–∞–≥–∞–∑–∏–Ω–µ', '0')
        }
        
        logging.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {result}")
        return result
        
    except Exception as e:
        logging.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_product_info: {str(e)}")
        return None


@profile_memory
async def preload_cache() -> None:
    """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞"""
    try:
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_records = users_sheet.get_all_records()
        cache["users_data"] = pickle.dumps(users_records)
        
        cache_size = sum(len(pickle.dumps(v)) for v in cache.values()) / 1024 / 1024
        logging.info(f"‚úÖ –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω. –†–∞–∑–º–µ—Ä: {cache_size:.2f} MB")
        logging.info("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω (–±–µ–∑ gamma_index)")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {str(e)}")


async def get_product_data_from_db(article: str, shop: str) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ SQLite –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –º–∞–≥–∞–∑–∏–Ω—É.
    
    Args:
        article (str): –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞.
        shop (str): –ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞.
        
    Returns:
        Optional[Dict[str, Any]]: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            # –ü–æ–∏—Å–∫ —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º –∞—Ä—Ç–∏–∫—É–ª–∞ –∏ –º–∞–≥–∞–∑–∏–Ω–∞
            cursor.execute("""
                SELECT "–ú–∞–≥–∞–∑–∏–Ω", "–û—Ç–¥–µ–ª", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ì–∞–º–º–∞", 
                       "–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.", "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω. –ø–æ—Å—Ç.", "–¢–æ–ø –≤ –º–∞–≥–∞–∑–∏–Ω–µ"
                FROM gamma_cluster 
                WHERE "–ê—Ä—Ç–∏–∫—É–ª" = ? AND "–ú–∞–≥–∞–∑–∏–Ω" = ?
            """, (article, shop))
            
            row = cursor.fetchone()
            
            if row:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º sqlite3.Row –≤ —Å–ª–æ–≤–∞—Ä—å
                return dict(row)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤ –ª—é–±–æ–º –º–∞–≥–∞–∑–∏–Ω–µ
            logging.info(f"–¢–æ–≤–∞—Ä {article} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ {shop}, –∏—â—É –≤ –ª—é–±–æ–º –º–∞–≥–∞–∑–∏–Ω–µ...")
            cursor.execute("""
                SELECT "–ú–∞–≥–∞–∑–∏–Ω", "–û—Ç–¥–µ–ª", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ì–∞–º–º–∞", 
                       "–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.", "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω. –ø–æ—Å—Ç.", "–¢–æ–ø –≤ –º–∞–≥–∞–∑–∏–Ω–µ"
                FROM gamma_cluster 
                WHERE "–ê—Ä—Ç–∏–∫—É–ª" = ?
                LIMIT 1
            """, (article,))
            
            row = cursor.fetchone()
            if row:
                logging.info(f"–ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω: {row['–ú–∞–≥–∞–∑–∏–Ω']} - {row['–ù–∞–∑–≤–∞–Ω–∏–µ']}")
                return dict(row)
            else:
                logging.warning(f"–¢–æ–≤–∞—Ä {article} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–∞–∂–µ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –º–∞–≥–∞–∑–∏–Ω—É")
                
            return None
            
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î (get_product_data_from_db): {e}")
        return None
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ get_product_data_from_db: {e}")
        return None
        


async def get_supplier_data_from_db(supplier_id: str, shop: str) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –∏ —Å—Ä–æ–∫–∞—Ö –ø–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ SQLite.

    Args:
        supplier_id (str): –ù–æ–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.
        shop (str): –ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ (–¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã).

    Returns:
        Optional[Dict[str, Any]]: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º supplier_id
    supplier_id = str(supplier_id).strip()
    if not supplier_id:
        return None

    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (–∫–∞–∫ –≤ Google Sheets)
            supplier_table_name = f"–î–∞—Ç—ã –≤—ã—Ö–æ–¥–æ–≤ –∑–∞–∫–∞–∑–æ–≤ {shop}"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—Ç–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞
            select_clause = '''
                SELECT "–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.", "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω. –ø–æ—Å—Ç.", "–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω",
                       "–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞", "–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ 2", "–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ 3"
            '''
            from_clause = f'FROM "{supplier_table_name}"'
            where_clause = 'WHERE "–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç." = ?'

            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            query = f"{select_clause} {from_clause} {where_clause}"
            
            cursor.execute(query, (supplier_id,))
            
            row = cursor.fetchone()
            
            if row:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º sqlite3.Row –≤ —Å–ª–æ–≤–∞—Ä—å
                return dict(row)
            else:
                logging.info(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ {supplier_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ '{supplier_table_name}'")
                return None
                
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î (get_supplier_data_from_db): {e}")
        return None
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ get_supplier_data_from_db: {e}")
        return None


# ===================== MIDDLEWARES =====================
@dp.update.middleware()
async def service_mode_middleware(handler, event, data):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    if SERVICE_MODE and (event.message or event.callback_query):
        user_id = event.message.from_user.id if event.message else event.callback_query.from_user.id
        if user_id not in ADMINS:
            msg = "‚è≥ –ë–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if event.message:
                await event.message.answer(msg)
            elif event.callback_query:
                await event.callback_query.answer(msg, show_alert=True)
            return
    return await handler(event, data)

@dp.update.middleware()
async def activity_tracker_middleware(handler, event, data):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        state = data.get('state')
        if state:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state_data = await state.get_data()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            response = await handler(event, data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            new_data = await state.get_data()
            new_data['last_activity'] = datetime.now().isoformat()
            await state.set_data(new_data)
            
            return response
        
        return await handler(event, data)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ç—Ä–µ–∫–µ—Ä–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}")
        return await handler(event, data)


# ===================== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –°–û–°–¢–û–Ø–ù–ò–ô =====================
async def state_cleanup_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    while True:
        try:
            now = datetime.now()
            cleared_count = 0
            
            if hasattr(dp.storage, 'storage'):
                states = dp.storage.storage
                logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {len(states)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
                
                for key, state_record in list(states.items()):
                    if not hasattr(state_record, 'data') or not isinstance(state_record.data, dict):
                        continue
                    
                    data = state_record.data
                    last_activity_str = data.get('last_activity')
                    
                    if not last_activity_str:
                        continue
                    
                    try:
                        last_activity = datetime.fromisoformat(last_activity_str)
                        inactivity = (now - last_activity).total_seconds() / 60
                        
                        if inactivity > 30:
                            user_id = key.user_id
                            logging.info(f"–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω {inactivity:.1f} –º–∏–Ω")
                            await dp.storage.set_state(key=key, state=None)
                            await dp.storage.set_data(key=key, data={})
                            del states[key]
                            cleared_count += 1
                            
                    except (TypeError, ValueError) as e:
                        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
                
                if cleared_count > 0:
                    logging.info(f"–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: –æ—á–∏—â–µ–Ω–æ {cleared_count} —Å–æ—Å—Ç–æ—è–Ω–∏–π")
            
            await asyncio.sleep(900)
                
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {str(e)}")
            await asyncio.sleep(300)


# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====================
@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(last_activity=datetime.now().isoformat())
    
    user_data = await get_user_data(str(message.from_user.id))
    if user_data:
        await message.answer("‚ÑπÔ∏è –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", 
                            reply_markup=main_menu_keyboard(message.from_user.id))
        return
    
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", 
                        reply_markup=types.ReplyKeyboardRemove())
    await log_user_activity(message.from_user.id, "/start", "registration")
    await state.set_state(Registration.name)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat(), name=message.text.strip())
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Registration.surname)

@dp.message(Registration.surname)
async def process_surname(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat(), surname=message.text.strip())
    await message.answer("üíº –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
    await state.set_state(Registration.position)

@dp.message(Registration.position)
async def process_position(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat(), position=message.text.strip())
    await message.answer("üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –Ω—É–ª–µ–π):")
    await state.set_state(Registration.shop)

@dp.message(Registration.shop)
async def process_shop(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    shop = message.text.strip()
    
    if not shop.isdigit():
        await message.answer("‚ùå –ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    
    data = await state.get_data()
    users_sheet.append_row([
        str(message.from_user.id),
        data['name'],
        data['surname'],
        data['position'],
        shop,
        datetime.now().strftime("%d.%m.%Y %H:%M")
    ])
    cache.pop(f"user_{message.from_user.id}", None)  # –°–±—Ä–æ—Å –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", 
                            reply_markup=main_menu_keyboard(message.from_user.id))
    await state.clear()


# –ù–∞–≤–∏–≥–∞—Ü–∏—è
@dp.message(F.text.in_(["‚Ü©Ô∏è –ù–∞–∑–∞–¥", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]))
async def handle_back(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                        reply_markup=main_menu_keyboard(message.from_user.id))

@dp.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    await state.update_data(last_activity=datetime.now().isoformat())
    
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        await message.answer("üîÑ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 
                            reply_markup=main_menu_keyboard(message.from_user.id))

# –ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞
@dp.message(F.text == "üõí –ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞")
async def handle_client_order(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    await state.update_data(last_activity=datetime.now().isoformat())
    user_data = await get_user_data(str(message.from_user.id))
    
    if not user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    
    await state.update_data(
        shop=user_data['shop'],
        user_name=user_data['name'],
        user_position=user_data['position']
    )
    
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:", 
                         reply_markup=cancel_keyboard())
    await log_user_activity(message.from_user.id, "–ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞", "order")
    await state.set_state(OrderStates.article_input)


@dp.message(OrderStates.article_input)
async def process_article_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞"""
    if message.photo:
        await message.answer("üì∏ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –≤—Ä—É—á–Ω—É—é.")
        return
    article = message.text.strip()
    
    if not re.match(r'^\d{4,10}$', article):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ç–∏–∫—É–ª–∞. –ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 4-10 —Ü–∏—Ñ—Ä.")
        return
        
    await state.update_data(article=article)
    await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:", 
                        reply_markup=shop_selection_keyboard())
    await state.set_state(OrderStates.shop_selection)


@dp.message(OrderStates.shop_selection)
async def process_shop_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    user_data = await get_user_data(str(message.from_user.id))
    
    if message.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–π –º–∞–≥–∞–∑–∏–Ω":
        selected_shop = user_data['shop']
    elif message.text == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π":
        await message.answer("üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π):")
        await state.set_state(OrderStates.shop_input)
        return
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é",
                            reply_markup=shop_selection_keyboard())
        return
    
    await state.update_data(selected_shop=selected_shop)
    await continue_order_process(message, state)

@dp.message(OrderStates.shop_input)
async def process_custom_shop(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    shop = message.text.strip()
    if not shop.isdigit() or shop.startswith('0'):
        await message.answer("‚ùó –ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –±–µ–∑ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    await state.update_data(selected_shop=shop)
    await continue_order_process(message, state)

async def continue_order_process(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    data = await state.get_data()
    article = data.get('article')
    selected_shop = data.get('selected_shop')
    
    await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...")
    product_info = await get_product_info(article, selected_shop)
    
    if not product_info:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ")
        await state.clear()
        return
        
    response = (
        f"–ú–∞–≥–∞–∑–∏–Ω: {selected_shop}\n"
        f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {product_info['–ê—Ä—Ç–∏–∫—É–ª']}\n"
        f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
        f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {product_info['–ü–æ—Å—Ç–∞–≤—â–∏–∫']}\n" 
        f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {product_info['–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞']}\n"
        f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {product_info['–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏']}\n"
    )

    if product_info.get('–¢–æ–ø –≤ –º–∞–≥–∞–∑–∏–Ω–µ', '0') == '0':
        response += "\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ, –∞—Ä—Ç–∏–∫—É–ª –≤ –¢–û–ü 0!</b>\n–°–≤—è–∂–∏—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞"

    
    await state.update_data(
        product_name=product_info['–ù–∞–∑–≤–∞–Ω–∏–µ'],
        department=product_info['–û—Ç–¥–µ–ª'],
        supplier_name=product_info['–ü–æ—Å—Ç–∞–≤—â–∏–∫'],
        order_date=product_info['–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞'],  
        delivery_date=product_info['–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏'],
        top_in_shop=product_info.get('–¢–æ–ø –≤ –º–∞–≥–∞–∑–∏–Ω–µ', '0')
    )
    
    await message.answer(response)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", 
                        reply_markup=cancel_keyboard())
    await state.set_state(OrderStates.quantity_input)

@dp.message(OrderStates.quantity_input)
async def process_quantity(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    quantity = message.text.strip()
    
    if not quantity.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=cancel_keyboard())
        return
        
    await state.update_data(quantity=int(quantity))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—É:", 
                        reply_markup=cancel_keyboard())
    await state.set_state(OrderStates.order_reason_input)

@dp.message(OrderStates.order_reason_input)
async def process_order_reason(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –∑–∞–∫–∞–∑–∞"""
    reason = message.text.strip()
    await state.update_data(order_reason=reason)
    
    data = await state.get_data()
    selected_shop = data.get('selected_shop')

    warning = ""
    if data.get('top_in_shop', '0') == '0':
        warning = "\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ, –∞—Ä—Ç–∏–∫—É–ª –≤ –¢–û–ü 0!</b>\n–°–≤—è–∂–∏—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞"
    
    response = (
        "üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {selected_shop}\n"
        f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {data['article']}\n"
        f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {data['product_name']}\n"
        f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {data['supplier_name']}\n" 
        f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {data['order_date']}\n"
        f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_date']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞/–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"{warning}"
    )
    
    await message.answer(response, reply_markup=confirm_keyboard())
    await state.set_state(OrderStates.confirmation)


@dp.message(OrderStates.confirmation, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def final_confirmation(message: types.Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    await state.update_data(last_activity=datetime.now().isoformat())
    data = await state.get_data()
    
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['selected_shop', 'article', 'order_reason', 'quantity', 'department']
    for field in required_fields:
        if field not in data:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç –æ—Ç–¥–µ–ª–∞
    department_sheet = orders_spreadsheet.worksheet(data['department'])
    next_row = len(department_sheet.col_values(1)) + 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updates = [
        {'range': f'A{next_row}', 'values': [[data['selected_shop']]]},
        {'range': f'B{next_row}', 'values': [[int(data['article'])]]},
        {'range': f'C{next_row}', 'values': [[data['order_reason']]]},
        {'range': f'D{next_row}', 'values': [[datetime.now().strftime("%d.%m.%Y %H:%M")]]},
        {'range': f'E{next_row}', 'values': [[f"{data['user_name']}, {data['user_position']}"]]},
        {'range': f'K{next_row}', 'values': [[int(data['quantity'])]]},
        {'range': f'R{next_row}', 'values': [[int(message.from_user.id)]]}
    ]

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    department_sheet.batch_update(updates)
    await message.answer("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", 
    reply_markup=main_menu_keyboard(message.from_user.id))
    await log_user_activity(message.from_user.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", "confirmation")
    await state.clear()



@dp.message(OrderStates.confirmation, F.text == "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
async def correct_quantity(message: types.Message, state: FSMContext):
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", 
                        reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderStates.quantity_input)


# –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
@dp.message(F.text == "üìã –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
async def handle_info_request(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        await state.update_data(last_activity=datetime.now().isoformat())
        await log_user_activity(message.from_user.id, "–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "info")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user_data(str(message.from_user.id))
        if not user_data:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        shop = user_data.get('shop', '–ù–µ —É–∫–∞–∑–∞–Ω')
        if shop == "–ù–µ —É–∫–∞–∑–∞–Ω":
            await message.answer("‚ùå –í –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ —É–∫–∞–∑–∞–Ω –º–∞–≥–∞–∑–∏–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–≥–∞–∑–∏–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_data({
            'shop': shop,
            'last_activity': datetime.now().isoformat()
        })
        
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_keyboard())
        await state.set_state(InfoRequest.article_input)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –Ω–∞—á–∞–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


@dp.message(InfoRequest.article_input)
async def process_info_request(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if 'shop' not in data:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            logging.warning(f"–ú–∞–≥–∞–∑–∏–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è {user_id}")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            user_data = await get_user_data(user_id)
            if not user_data:
                logging.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {user_id}")
                await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
                await state.clear()
                return
                
            shop = user_data.get('shop', '–ù–µ —É–∫–∞–∑–∞–Ω')
            if shop == "–ù–µ —É–∫–∞–∑–∞–Ω":
                logging.warning(f"–ú–∞–≥–∞–∑–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è {user_id}")
                await message.answer("‚ùå –í –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ —É–∫–∞–∑–∞–Ω –º–∞–≥–∞–∑–∏–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                await state.clear()
                return
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(shop=shop)
                logging.info(f"–ú–∞–≥–∞–∑–∏–Ω {shop} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {user_id}")
        else:
            shop = data['shop']
            logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∞–≥–∞–∑–∏–Ω {shop} –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è {user_id}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
        article = None
        if message.photo:
            await message.answer("üì∏ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –≤—Ä—É—á–Ω—É—é.")
            return
        else:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            logging.info(f"–†—É—á–Ω–æ–π –≤–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞: {message.text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            article = message.text.strip()
            if not re.match(r'^\d{4,10}$', article):
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ç–∏–∫—É–ª–∞.")
                return
        
        # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
        logging.info(f"–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ {article} –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})")
        await message.answer("üîÑ –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ...")
        product_info = await get_product_info(article, shop)
        
        if not product_info:
            logging.warning(f"–¢–æ–≤–∞—Ä {article} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})")
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = (
            f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:\n"
            f"–ú–∞–≥–∞–∑–∏–Ω: {shop}\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {product_info['–ê—Ä—Ç–∏–∫—É–ª']}\n"
            f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
            f"üî¢ –û—Ç–¥–µ–ª: {product_info['–û—Ç–¥–µ–ª']}\n"
            f"üìÖ –ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {product_info['–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞']}\n"
            f"üöö –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {product_info['–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏']}\n"
            f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {product_info['–ü–æ—Å—Ç–∞–≤—â–∏–∫']}" 
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –¢–û–ü 0
        if product_info.get('–¢–æ–ø –≤ –º–∞–≥–∞–∑–∏–Ω–µ', '0') == '0':
            response += "\n\n‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï: –ê—Ä—Ç–∏–∫—É–ª –≤ –¢–û–ü 0!</b>\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        
        await message.answer(response, reply_markup=main_menu_keyboard(message.from_user.id))
        await state.clear()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {article} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()



##=============================–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò====================================
@dp.message(F.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def handle_admin_panel(message: types.Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await message.answer("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", 
                        reply_markup=admin_panel_keyboard())


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_admin_stats(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    if message.from_user.id not in ADMINS:
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ –∫—ç—à–∞
        users_data = pickle.loads(cache.get("users_data", b"[]"))
        users_count = len(users_data) if users_data else 0
        
        # –ü–†–Ø–ú–û–ï –û–ë–†–ê–©–ï–ù–ò–ï –ö GOOGLE SHEETS –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò
        stats_sheet = main_spreadsheet.worksheet(STATSS_SHEET_NAME)
        stats_records = stats_sheet.get_all_records()
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        orders_count = sum(1 for r in stats_records if r.get('–¢–∏–ø —Å–æ–±—ã—Ç–∏—è') == 'order')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        cpu_usage = psutil.cpu_percent()
        memory_usage = psutil.virtual_memory().percent
        
        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ: {orders_count}\n"
            f"‚Ä¢ –õ–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π: {len(stats_records)}\n\n"
            f"‚öôÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:\n"
            f"‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_usage}%\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {memory_usage}%\n"
            f"‚Ä¢ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º: {'–í–ö–õ' if SERVICE_MODE else '–í–´–ö–õ'}"
        )
        await message.answer(response, reply_markup=admin_panel_keyboard())
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", 
                            reply_markup=admin_panel_keyboard())



@dp.message(F.text == "üìä –î–∞–º–ø –ø–∞–º—è—Ç–∏")
async def handle_memory_dump(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–º–ø–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)"""
    if message.from_user.id not in ADMINS:
        return
    
    wait_msg = await message.answer("üîÑ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø–∞–º—è—Ç–∏...")
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = []
        process = psutil.Process()
        mem_info = process.memory_info()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        report.append(f"<b>üìä –û—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏</b>")
        report.append(f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
        report.append(f"‚Ä¢ RSS: {mem_info.rss / 1024 / 1024:.2f} MB")
        report.append(f"‚Ä¢ VMS: {mem_info.vms / 1024 / 1024:.2f} MB")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
        report.append("\n<b>üî¢ –ü—Ä–æ—Ü–µ—Å—Å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>")
        report.append(f"‚Ä¢ –ü–æ—Ç–æ–∫–æ–≤: {process.num_threads()}")
        report.append(f"‚Ä¢ –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤: {process.num_fds()}")
        
        # –¢–æ–ø –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏
        report.append("\n<b>üì¶ –¢–æ–ø –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏:</b>")
        common_types = objgraph.most_common_types(limit=15)
        for i, (obj_type, count) in enumerate(common_types, 1):
            report.append(f"{i}. {obj_type}: {count}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        full_report = "\n".join(report)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
        for i in range(0, len(full_report), 4000):
            part = full_report[i:i+4000]
            await message.answer(
                part,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
        
        await wait_msg.delete()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–º–ø–∞ –ø–∞–º—è—Ç–∏: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        with suppress(Exception):
            await wait_msg.delete()


##===============–†–ê–°–°–´–õ–ö–ê=================

@dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def handle_broadcast_menu(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.from_user.id not in ADMINS:
        return
    
    await message.answer(
        "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ —Å –º–µ–¥–∏–∞-–≤–ª–æ–∂–µ–Ω–∏—è–º–∏):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AdminBroadcast.message_input)

@dp.message(AdminBroadcast.message_input)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    content = {
        'text': message.html_text,
        'media': None,
        'type': 'text'
    }
    
    if message.photo:
        content.update({
            'type': 'photo',
            'media': message.photo[-1].file_id,
            'caption': message.caption
        })
    elif message.document:
        content.update({
            'type': 'document',
            'media': message.document.file_id,
            'caption': message.caption
        })
    
    await state.update_data(content=content)
    
    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    preview_text = "‚úâÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
    if content['type'] == 'text':
        preview_text += content['text']
    else:
        preview_text += f"[{content['type'].upper()}] {content.get('caption', '')}"
    
    await message.answer(
        preview_text,
        reply_markup=broadcast_target_keyboard()
    )
    await state.set_state(AdminBroadcast.target_selection)

@dp.message(AdminBroadcast.target_selection)
async def handle_target_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    if message.text == "–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º":
        await state.update_data(target="all")
        await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", 
                            reply_markup=broadcast_confirmation_keyboard())
        await state.set_state(AdminBroadcast.confirmation)
    elif message.text == "–í—Ä—É—á–Ω—É—é":
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(AdminBroadcast.manual_ids)
    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=admin_panel_keyboard())
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", 
                            reply_markup=broadcast_target_keyboard())

@dp.message(AdminBroadcast.manual_ids)
async def process_manual_ids(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID"""
    user_ids = [id.strip() for id in message.text.split(",") if id.strip().isdigit()]
    
    if not user_ids:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    
    await state.update_data(target="manual", user_ids=user_ids)
    await message.answer(f"‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–≤–µ–¥–µ–Ω—ã ({len(user_ids)} —à—Ç.)", 
                        reply_markup=broadcast_confirmation_keyboard())
    await state.set_state(AdminBroadcast.confirmation)

@dp.message(AdminBroadcast.confirmation, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def confirm_broadcast(message: types.Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    content = data['content']
    target = data.get('target', 'all')
    user_ids = data.get('user_ids', [])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if target == "all":
        users_data = pickle.loads(cache.get("users_data", b"[]"))
        user_ids = [str(user['ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']) for user in users_data if user.get('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')]
    elif target == "manual":
        # –£–∂–µ –µ—Å—Ç—å user_ids
        pass
    
    if not user_ids:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥–∏
    try:
        logs_sheet.append_row([
            datetime.now().strftime("%d.%m.%Y %H:%M"),
            message.from_user.id,
            "BROADCAST",
            f"Type: {content['type']}, Users: {len(user_ids)}"
        ])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")
    
    await message.answer(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...", 
                        reply_markup=admin_panel_keyboard())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
    asyncio.create_task(send_broadcast(content, user_ids))
    
    await state.clear()

async def send_broadcast(content: dict, user_ids: list):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    success = 0
    failed = 0
    errors = []
    
    for user_id in user_ids:
        try:
            if not user_id.strip():
                continue
                
            if content['type'] == 'text':
                await bot.send_message(int(user_id), content['text'])
            elif content['type'] == 'photo':
                await bot.send_photo(
                    int(user_id),
                    photo=content['media'],
                    caption=content.get('caption', '')
                )
            elif content['type'] == 'document':
                await bot.send_document(
                    int(user_id),
                    document=content['media'],
                    caption=content.get('caption', '')
                )
            
            success += 1
            await asyncio.sleep(0.1)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        except TelegramForbiddenError:
            failed += 1  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        except Exception as e:
            failed += 1
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}: {str(e)}")
            if not isinstance(e, (TelegramBadRequest, TimeoutError)):
                raise
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    report = (
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(user_ids)}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )
    
    if errors:
        unique_errors = set(errors)
        report += f"\n\n–û—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏:\n" + "\n".join([f"- {e}" for e in list(unique_errors)[:3]])
    
    try:
        await bot.send_message(ADMINS[0], report)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç: {str(e)}")


##===============–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò=================

@dp.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à")
async def handle_cache_refresh(message: types.Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞"""
    if message.from_user.id not in ADMINS:
        return
    
    try:
        cache.clear()
        await preload_cache()
        await message.answer("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", 
                            reply_markup=admin_panel_keyboard())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {str(e)}", 
                            reply_markup=admin_panel_keyboard())

@dp.message(F.text == "üîß –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º")
async def handle_service_mode_menu(message: types.Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–º —Ä–µ–∂–∏–º–æ–º"""
    if message.from_user.id not in ADMINS:
        return
    
    status = "üü¢ –í–ö–õ–Æ–ß–ï–ù" if SERVICE_MODE else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù"
    await message.answer(
        f"üõ† –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {status}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=service_mode_keyboard()
    )

@dp.message(F.text == "üü¢ –í–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º")
async def enable_service_mode(message: types.Message):
    """–í–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    if message.from_user.id not in ADMINS:
        return
    
    global SERVICE_MODE
    SERVICE_MODE = True
    await message.answer("‚úÖ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω", 
                        reply_markup=admin_panel_keyboard())

@dp.message(F.text == "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º")
async def disable_service_mode(message: types.Message):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    if message.from_user.id not in ADMINS:
        return
    
    global SERVICE_MODE
    SERVICE_MODE = False
    await message.answer("‚úÖ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω", 
                        reply_markup=admin_panel_keyboard())





#============================–ó–∞–¥–∞—á–∏========================
def format_task_message(task_id: str, task: dict) -> str:
    deadline = task.get('–î–µ–¥–ª–∞–π–Ω')
    deadline_text = f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline}" if deadline else "‚è≥ –ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"
    
    return (
        f"üìå *–ó–∞–¥–∞—á–∞ #{task_id}*\n"
        f"‚ñ´Ô∏è {task['text']}\n"
        f"üë§ –°–æ–∑–¥–∞–ª: {task['creator_initials']}\n"
        f"{deadline_text}\n"
        f"üîó {'[–°—Å—ã–ª–∫–∞](' + task['link'] + ')' if task.get('link') else '–ù–µ—Ç —Å—Å—ã–ª–∫–∏'}"
    )


@dp.message(F.text == "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏")
async def handle_task_menu(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    await message.answer("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:", reply_markup=tasks_admin_keyboard())

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task_text(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:", reply_markup=cancel_keyboard())
    await state.set_state(TaskStates.add_text)

@dp.message(TaskStates.add_text)
async def add_task_link(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("üîó –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google Sheets (–∏–ª–∏ /skip):")
    await state.set_state(TaskStates.add_link)

@dp.message(TaskStates.add_link)
async def add_task_deadline(message: types.Message, state: FSMContext):
    link = message.text if message.text != "/skip" else None
    await state.update_data(link=link)
    await message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ /skip):")
    await state.set_state(TaskStates.add_deadline)

@dp.message(TaskStates.add_deadline)
async def save_task_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    deadline = message.text if message.text != "/skip" else None
    
    if deadline and not re.match(r"^\d{2}\.\d{2}\.\d{4}$", deadline):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    
    task_id = str(int(time.time()))
    creator_initials = await get_user_initials(message.from_user.id)
    
    await save_task(
        task_id=task_id,
        text=data["text"],
        creator_id=message.from_user.id,
        creator_initials=creator_initials,
        link=data.get("link"),
        deadline=deadline
    )
    
    await message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
        f"ID: `{task_id}`\n"
        f"–î–µ–¥–ª–∞–π–Ω: {deadline if deadline else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}",
        reply_markup=tasks_admin_keyboard()
    )
    await state.clear()


@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
async def delete_task_start(message: types.Message, state: FSMContext):
    tasks = await load_tasks()
    if not tasks:
        await message.answer("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    tasks_list = "\n".join(f"ID: `{id}` ‚Äî {task['text']}" for id, task in tasks.items())
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{tasks_list}",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(TaskStates.delete_task)


@dp.message(TaskStates.delete_task)
async def delete_task_handler(message: types.Message, state: FSMContext):
    task_id = message.text.strip()
    if not await delete_task(task_id, message.from_user.id):
        await message.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤!")
    else:
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=tasks_admin_keyboard())
    await state.clear()



@dp.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
async def send_tasks_menu(message: types.Message, state: FSMContext):
    tasks = await load_tasks()
    if not tasks:
        await message.answer("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.", reply_markup=tasks_admin_keyboard())
        return
    
    await state.update_data(tasks=tasks)
    keyboard = create_keyboard(
        ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ", "–í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á–∏", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "üîô –ù–∞–∑–∞–¥"],
        (2, 2)
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await state.set_state(TaskStates.select_action)

@dp.message(TaskStates.select_action, F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ")
async def send_all_tasks(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tasks = data.get("tasks")

    if not tasks:
        await message.answer("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        await state.clear()
        return

    await state.update_data(selected_tasks=tasks)

    await message.answer(
        f"‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∑–∞–¥–∞—á–∏: {len(tasks)} —à—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:",
        reply_markup=create_keyboard(
            ["–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", "–ü–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏", "–í—Ä—É—á–Ω—É—é", "üîô –ù–∞–∑–∞–¥"],
            (2, 2)
        )
    )
    await state.set_state(TaskStates.select_audience)


@dp.message(TaskStates.select_action, F.text == "–í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á–∏")
async def select_action_to_send(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tasks = data['tasks']
    
    tasks_list = "\n".join([f"{task_id}: {task['text']}" for task_id, task in tasks.items()])
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n{tasks_list}",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(TaskStates.input_task_ids)


@dp.message(TaskStates.input_task_ids)
async def process_task_ids(message: types.Message, state: FSMContext):
    data = await state.get_data()
    all_tasks = data['tasks']
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥: —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    input_ids = [tid.strip() for tid in message.text.split(",") if tid.strip()]
    
    if not input_ids:
        await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ ID –∑–∞–¥–∞—á–∏.")
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ ID –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    all_task_ids = {str(k): v for k, v in all_tasks.items()}
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏
    valid_tasks = {}
    invalid_ids = []
    
    for input_id in input_ids:
        if input_id in all_task_ids:
            valid_tasks[input_id] = all_task_ids[input_id]
        else:
            invalid_ids.append(input_id)
    
    if not valid_tasks:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏.")
        return
    
    # –°–æ–æ–±—â–∞–µ–º –æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö ID (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if invalid_ids:
        await message.answer(
            f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞—á–∏ —Å ID: {', '.join(invalid_ids)}\n"
            f"–ë—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    await state.update_data(selected_tasks=valid_tasks)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    await message.answer(
        f"‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: {len(valid_tasks)} –∑–∞–¥–∞—á\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:",
        reply_markup=create_keyboard(["–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º","–ü–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏", "–í—Ä—É—á–Ω—É—é", "üîô –ù–∞–∑–∞–¥"], (2, 2))
    )
    await state.set_state(TaskStates.select_audience)


@dp.message(TaskStates.select_audience, F.text == "–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
async def send_to_all_users(message: types.Message, state: FSMContext):
    user_ids = users_sheet.col_values(1)[1:]
    await state.update_data(user_ids=user_ids)
    await message.answer(
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}\nüì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–¥–∞—á",
        reply_markup=create_keyboard(["üì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", "‚ùå –û—Ç–º–µ–Ω–∞"], (2,))
    )
    await state.set_state(TaskStates.confirmation)


@dp.message(TaskStates.select_audience, F.text == "–ü–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
async def ask_for_position_filter(message: types.Message, state: FSMContext):
    await message.answer("üë• –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:", reply_markup=cancel_keyboard())
    await state.set_state(TaskStates.input_position)


@dp.message(TaskStates.input_position)
async def process_position_filter(message: types.Message, state: FSMContext):
    position_input = message.text.strip().lower()
    try:
        users_data = pickle.loads(cache.get("users_data", b"[]"))
        matched_user_ids = [
            str(u["ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"])
            for u in users_data
            if str(u.get("–î–æ–ª–∂–Ω–æ—Å—Ç—å", "")).strip().lower() == position_input
        ]

        if not matched_user_ids:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–∞–∫–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        await state.update_data(user_ids=matched_user_ids)
        await message.answer(
            f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(matched_user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\nüì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–¥–∞—á",
            reply_markup=create_keyboard(["üì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", "‚ùå –û—Ç–º–µ–Ω–∞"], (2,))
        )
        await state.set_state(TaskStates.confirmation)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
        await state.clear()


@dp.message(TaskStates.select_audience, F.text == "–í—Ä—É—á–Ω—É—é")
async def ask_for_manual_ids(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(TaskStates.input_manual_ids)


async def send_selected_tasks(selected_tasks: dict, user_ids: list):
    results = {"success": 0, "failed": 0}
    
    for user_id in user_ids:
        try:
            for task_id, task in selected_tasks.items():
                await bot.send_message(
                    user_id,
                    format_task_message(task_id, task),
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=get_task_keyboard(task_id))
            results["success"] += 1
            logging.info(f"Sent tasks to {user_id}")
        except Exception as e:
            results["failed"] += 1
            logging.error(f"Error sending to {user_id}: {str(e)}")
    
    return results


@dp.message(TaskStates.input_manual_ids)
async def handle_manual_user_ids(message: types.Message, state: FSMContext):
    user_ids = [uid.strip() for uid in message.text.split(",") if uid.strip().isdigit()]

    if not user_ids:
        await message.answer("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(user_ids=user_ids)

    await message.answer(
        f"‚úÖ –£–∫–∞–∑–∞–Ω–æ ID: {len(user_ids)}\nüì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–¥–∞—á.",
        reply_markup=create_keyboard(["üì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", "‚ùå –û—Ç–º–µ–Ω–∞"], (2,))
    )
    await state.set_state(TaskStates.confirmation)


@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back_from_tasks(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∑–∞–¥–∞—á"""
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", 
                        reply_markup=admin_panel_keyboard())


@dp.message(TaskStates.select_audience, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_sending(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=tasks_admin_keyboard())


@dp.callback_query(F.data.startswith("task_done:"))
async def mark_task_done(callback: types.CallbackQuery):
    task_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    sheet = get_tasks_sheet()
    
    try:
        cell = sheet.find(task_id)
        if not cell:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        statuses = json.loads(sheet.cell(cell.row, 8).value)
        if user_id in statuses.get("user_ids", []):
            await callback.answer("‚úÖ –£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ")
            return
        
        statuses["user_ids"].append(user_id)
        sheet.update_cell(cell.row, 8, json.dumps(statuses))

        await callback.answer("‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

        # –û–±–Ω–æ–≤–∏–º inline –∫–Ω–æ–ø–∫—É
        new_markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úîÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="done", disabled=True)]
        ])
        await callback.message.edit_reply_markup(reply_markup=new_markup)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

async def check_deadlines():
    while True:
        tasks = await load_tasks()
        today = datetime.now().strftime("%d.%m.%Y")
        
        for task_id, task in tasks.items():
            if not task.get("deadline"):
                continue
                
            if task["deadline"] < today:  # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
                for user_id in task["completed_by"]:
                    try:
                        await bot.send_message(
                            user_id,
                            f"üö® *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!*\n–ó–∞–¥–∞—á–∞: {task['text']}\n"
                            f"–î–µ–¥–ª–∞–π–Ω –±—ã–ª: {task['deadline']}",
                            parse_mode=ParseMode.MARKDOWN
                        )
                    except Exception:
                        continue
        
        await asyncio.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏


@dp.message(TaskStates.confirmation, F.text == "üì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")
async def confirm_task_dispatch(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_ids = data.get("user_ids", [])
    selected_tasks = data.get("selected_tasks", {})

    if not user_ids or not selected_tasks:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–ª–∏ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        await state.clear()
        return

    success = 0
    failed = 0

    for uid in user_ids:
        for task_id, task in selected_tasks.items():
            try:
                await bot.send_message(
                    int(uid),
                    format_task_message(task_id, task),
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=get_task_keyboard(task_id)
                )
                success += 1
                await asyncio.sleep(0.1)  # –∑–∞—â–∏—Ç–Ω–∞—è –ø–∞—É–∑–∞
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
                failed += 1

    await message.answer(
        f"üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}\n"
        f"‚Ä¢ –ó–∞–¥–∞—á –∫–∞–∂–¥–æ–º—É: {len(selected_tasks)}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {success}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {failed}",
        reply_markup=tasks_admin_keyboard()
    )

    await state.clear()


@dp.message(TaskStates.confirmation, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_task_dispatch(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=tasks_admin_keyboard())
    await state.clear()


@dp.message(Command("mytasks"))
async def handle_mytasks(message: types.Message):
    user_id = message.from_user.id
    sheet = get_tasks_sheet()

    try:
        rows = sheet.get_all_records()
        pending_tasks = []

        for row in rows:
            task_id = row.get("ID –∑–∞–¥–∞—á–∏")
            statuses_raw = row.get("–°—Ç–∞—Ç—É—Å—ã", "{}")
            try:
                statuses = json.loads(statuses_raw)
            except json.JSONDecodeError:
                statuses = {"user_ids": []}

            if user_id not in statuses.get("user_ids", []):
                pending_tasks.append((task_id, normalize_task_row(task_id, row)))

        if not pending_tasks:
            await message.answer("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return

        for task_id, task in pending_tasks[:5]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5
            msg = format_task_message(task_id, task)
            await message.answer(
                msg,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_task_keyboard(task_id)
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /mytasks: {str(e)}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –∑–∞–¥–∞—á–∏.")
        

@dp.message(TaskStates.select_action, F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
async def show_stats_menu(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tasks = data['tasks']
    
    stats = []
    for task_id, task in tasks.items():
        completed = len(task['completed_by'])
        stats.append(f"{task_id}: {task['text']} - ‚úÖ {completed} —á–µ–ª.")
    
    await message.answer(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n" + "\n".join(stats),
        reply_markup=create_keyboard(["–î–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–¥–∞—á–µ", "üîô –ù–∞–∑–∞–¥"], (1,))
    )
    await state.set_state(TaskStates.view_stats)

@dp.message(TaskStates.view_stats, F.text == "–î–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–¥–∞—á–µ")
async def ask_for_task_details(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:", reply_markup=cancel_keyboard())
    await state.set_state(TaskStates.input_task_id_for_details)

@dp.message(TaskStates.input_task_id_for_details)
async def show_task_details(message: types.Message, state: FSMContext):
    task_id = message.text.strip()
    data = await state.get_data()
    tasks = data['tasks']
    
    if task_id not in tasks:
        await message.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    task = tasks[task_id]
    completed_users = task['completed_by']
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö
    user_names = []
    for user_id in completed_users:
        initials = await get_user_initials(user_id)
        user_names.append(f"{initials} (ID: {user_id})")
    
    response = (
        f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ {task_id}:\n"
        f"–¢–µ–∫—Å—Ç: {task['text']}\n"
        f"–í—ã–ø–æ–ª–Ω–∏–ª–∏ ({len(completed_users)}):\n"
    )
    response += "\n".join(user_names) if user_names else "–ù–∏–∫—Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª"
    
    await message.answer(response, reply_markup=tasks_admin_keyboard())
    await state.clear()

# ===================== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====================
async def scheduled_cache_update():
    """–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞"""
    while True:
        await asyncio.sleep(3600 * 12)  # –ö–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
        try:
            await preload_cache()
            logging.info("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {str(e)}")

async def startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    init_tracemalloc()
    logging.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:  
        asyncio.create_task(memory_monitor())
        await preload_cache()
        asyncio.create_task(scheduled_cache_update())
        asyncio.create_task(state_cleanup_task())
        asyncio.create_task(check_deadlines())
        logging.info("‚úÖ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")
    except Exception as e:
        logging.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
        raise

async def shutdown():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    try:
        await bot.session.close()
        await dp.storage.close()
        logging.info("‚úÖ –†–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {str(e)}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        await startup()
        logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞")
        await dp.start_polling(bot, skip_updates=True)
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        # –õ–æ–≤–∏–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞ (–Ω–µ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
        logging.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}\n{traceback.format_exc()}")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in ADMINS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üö® –ë–æ—Ç —É–ø–∞–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:\n{str(e)}\n\n{traceback.format_exc()[:3000]}"
                )
            except Exception:
                pass
    finally:
        await shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        asyncio.run(shutdown())
