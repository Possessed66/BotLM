import os
import json
from typing import Dict, Any, List
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import Command
from contextlib import suppress
from google.oauth2.service_account import Credentials
import gspread
from gspread.exceptions import APIError, SpreadsheetNotFound
from aiohttp import web
import asyncio
from cachetools import cached, TTLCache
import logging
from tenacity import retry, stop_after_attempt, wait_exponential


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
)

# ===================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ï–†–í–ò–°–ù–û–ì–û –†–ï–ñ–ò–ú–ê =====================
SERVICE_MODE = False
ADMINS = [122086799]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# ===================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–≠–®–ê =====================
CACHE_TTL = 43200  # 12 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
cache = TTLCache(maxsize=1000, ttl=CACHE_TTL)

# ===================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====================
from dotenv import load_dotenv

load_dotenv('secret.env')  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
try:
    BOT_TOKEN = os.environ['BOT_TOKEN']
    GOOGLE_CREDS_JSON = os.environ['GOOGLE_CREDENTIALS']
except KeyError as e:
    raise RuntimeError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º GOOGLE_CREDENTIALS –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç
GOOGLE_CREDS = json.loads(GOOGLE_CREDS_JSON)
SPREADSHEET_NAME = "ShopBotData"
STATSS_SHEET_NAME = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
ORDERS_SPREADSHEET_NAME = "–ö–æ–ø–∏—è –ó–∞–∫–∞–∑—ã –ú–ó 0.2"
USERS_SHEET_NAME = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
GAMMA_CLUSTER_SHEET = "–ì–∞–º–º–∞ –∫–ª–∞—Å—Ç–µ—Ä"
LOGS_SHEET = "–õ–æ–≥–∏"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤
# –í —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
USE_WEBHOOKS = os.getenv('USE_WEBHOOKS', 'false').lower() == 'true'

# –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –≤–µ–±—Ö—É–∫-—Ä–µ–∂–∏–º–∞
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST')  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://your-bot.render.com
WEBHOOK_PATH = "/webhook"  # –ü—É—Ç—å –¥–ª—è –≤–µ–±-—Ö—É–∫–∞
WEBHOOK_PORT = 8443
WEBHOOK_URL = f"{WEBHOOK_HOST}:{WEBHOOK_PORT}{WEBHOOK_PATH}" if USE_WEBHOOKS else None
if USE_WEBHOOKS and not WEBHOOK_HOST.startswith("https://"):
    raise ValueError("WEBHOOK_HOST must be HTTPS URL in webhook mode")


# ===================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====================
credentials = Credentials.from_service_account_info(
    GOOGLE_CREDS,
    scopes=['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
)
client = gspread.authorize(credentials)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
try:
    main_spreadsheet = client.open(SPREADSHEET_NAME)
    users_sheet = main_spreadsheet.worksheet(USERS_SHEET_NAME)
    logs_sheet = main_spreadsheet.worksheet(LOGS_SHEET)
    orders_spreadsheet = client.open(ORDERS_SPREADSHEET_NAME)
    gamma_cluster_sheet = orders_spreadsheet.worksheet(GAMMA_CLUSTER_SHEET)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
    exit()


# ===================== –°–û–°–¢–û–Ø–ù–ò–Ø FSM =====================
class Registration(StatesGroup):
    name = State()
    surname = State()
    position = State()
    shop = State()


class OrderStates(StatesGroup):
    article_input = State()
    shop_selection = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    shop_input = State() 
    quantity_input = State()
    confirmation = State()
    order_reason_input = State()


class InfoRequest(StatesGroup):
    article_input = State()


class AdminBroadcast(StatesGroup):
    message_input = State()
    target_selection = State()
    manual_ids = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ ID
    confirmation = State()

# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ö–õ–ê–°–° =====================
class FakeSheet:
    """–ò–º–∏—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –ª–∏—Å—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    def __init__(self, data):
        self.data = data
        self.headers = list(data[0].keys()) if data else []
    
    def find(self, value):
        for idx, row in enumerate(self.data):
            if str(value) in row.values():
                return type('Cell', (), {'row': idx + 2})  # –≠–º—É–ª–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —è—á–µ–π–∫–∏
        raise gspread.exceptions.CellNotFound(value)
    
    def row_values(self, row):
        return list(self.data[row-2].values()) if row-2 < len(self.data) else []
    
    def get_all_records(self):
        return self.data


# ===================== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====================
def main_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìã –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    builder.button(text="üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞")
    builder.button(text="üõí –ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞")
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)


def article_input_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def confirm_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
    builder.button(text="‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)


def broadcast_confirmation_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
    builder.adjust(1, 2)
    return builder.as_markup(resize_keyboard=True)


def shop_selection_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–π –º–∞–≥–∞–∑–∏–Ω")
    builder.button(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    builder.adjust(2, 1)
    return builder.as_markup(resize_keyboard=True)


def target_selection_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="–í—Å–µ–º")
    builder.button(text="–í—Ä—É—á–Ω—É—é")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)



# ===================== –°–ï–†–í–ò–°–ù–´–ô –†–ï–ñ–ò–ú =====================
async def notify_admins(message: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    for admin_id in ADMINS:
        with suppress(TelegramForbiddenError):
            await bot.send_message(admin_id, message)

async def broadcast(message: str):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    users = users_sheet.col_values(1)[1:]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ A
    for user_id in users:
        with suppress(TelegramForbiddenError, ValueError):
            await bot.send_message(int(user_id), message)

async def toggle_service_mode(enable: bool):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    global SERVICE_MODE
    SERVICE_MODE = enable
    status = "–í–ö–õ–Æ–ß–ï–ù" if enable else "–í–´–ö–õ–Æ–ß–ï–ù"
    await notify_admins(f"üõ† –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º {status}")




# ===================== –°–ò–°–¢–ï–ú–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø =====================
async def cache_sheet_data(sheet, cache_key: str):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞"""
    try:
        print(f"‚åõ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –¥–ª—è –∫–ª—é—á–∞: {cache_key}")
        data = sheet.get_all_records()
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets ({cache_key}): {data[:1]}...")  # –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        cache[cache_key] = data
        print(f"üì• –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –∫—ç—à: {cache_key} ({len(data)} –∑–∞–ø–∏—Å–µ–π)")
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {cache_key}: {str(e)}")
        raise



async def cache_supplier_data(shop: str):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞"""
    cache_key = f"supplier_{shop}"
    try:
        sheet = get_supplier_dates_sheet(shop)
        data = sheet.get_all_records()
        cache[cache_key] = data
        print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop}: {len(data)}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop}: {str(e)}")




async def preload_cache(_=None):  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    try:
        print("‚ôªÔ∏è –ù–∞—á–∞–ª–æ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞...")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        await cache_sheet_data(users_sheet, "users")
        await cache_sheet_data(gamma_cluster_sheet, "gamma_cluster")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        shops = users_sheet.col_values(5)[1:]  # –ö–æ–ª–æ–Ω–∫–∞ E
        for shop in set(shops):
            await cache_supplier_data(shop)
            
        print(f"‚úÖ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω. –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(cache)}")
        validate_cache_keys()
    
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {str(e)}")
        raise

def validate_cache_keys():
    required_keys = ['users', 'gamma_cluster']
    for key in required_keys:
        if key not in cache:
            raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞: {key}")


# ===================== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–û–í =====================
@dp.message(Command("stats"))
async def get_stats(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if message.from_user.id not in ADMINS:
        return
    
    try:
        spreadsheet = client.open(ORDERS_SPREADSHEET_NAME)
        stats_sheet = spreadsheet.worksheet(STATS_SHEET_NAME)
        records = stats_sheet.get_all_records()
        
        total = len(records)
        success = len([r for r in records if '‚úÖ' in r['–°—Ç–∞—Ç—É—Å']])
        failed = total - success
        
        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: {total}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {success}\n"
            f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫:\n"
        )
        
        for r in records[-5:]:
            if '‚ùå' in r['–°—Ç–∞—Ç—É—Å']:
                response += f"\n- {r['Date']}: {r['Status']}"
                
        await message.answer(response)
        
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@dp.message(Command("full_stats"))
async def get_full_stats(message: types.Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if message.from_user.id not in ADMINS:
        return
    
    try:
        spreadsheet = client.open(ORDERS_SPREADSHEET_NAME)
        stats_sheet = spreadsheet.worksheet(STATS_SHEET_NAME)
        stats_sheet.export('csv')
        
        with open("stats.csv", "rb") as file:
            await message.answer_document(file, caption="üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

@dp.message(F.text == "/maintenance_on")
async def maintenance_on(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    
    await toggle_service_mode(True)
    await broadcast("üîß –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
    await message.answer("–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

@dp.message(F.text == "/maintenance_off")
async def maintenance_off(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    
    await toggle_service_mode(False)
    await broadcast("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ë–æ—Ç —Å–Ω–æ–≤–∞ –≤ —Ä–∞–±–æ—Ç–µ.")
    await message.answer("–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")


# ===================== –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ò–î–õ–í–ê–† =====================
@dp.update.middleware()
async def service_mode_middleware(handler, event, data):
    if SERVICE_MODE and event.message:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        user_id = event.message.from_user.id
        if user_id not in ADMINS:
            with suppress(TelegramForbiddenError):
                await event.message.answer("‚è≥ –ë–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    return await handler(event, data)



@dp.message(F.text.lower().in_(["–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞", "/cancel"]))
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üîÑ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 
                        reply_markup=main_menu_keyboard())



@dp.update.middleware()
async def timeout_middleware(handler, event, data):
    state = data.get('state')
    if state:
        current_state = await state.get_state()
        if current_state:
            state_data = await state.get_data()
            last_activity_str = state_data.get('last_activity')

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            try:
                last_activity = datetime.fromisoformat(last_activity_str)
            except (ValueError, TypeError):
                last_activity = datetime.min
                logging.warning(f"Invalid last_activity format for user {event.from_user.id}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ (30 –º–∏–Ω—É—Ç)
            if datetime.now() - last_activity > timedelta(minutes=20):
                await state.clear()
                if isinstance(event, (types.Message, types.CallbackQuery)):
                    await event.answer("üïí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            await state.update_data(last_activity=datetime.now().isoformat())

    return await handler(event, data)
    

# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================
async def get_user_data(user_id: str) -> Dict[str, Any]:
    cache_key = f"user_{user_id}"
    if cache_key in cache:
        return cache[cache_key]
    
    try:
        cell = users_sheet.find(user_id)
        user_data = {
            'shop': users_sheet.cell(cell.row, 5).value,
            'name': users_sheet.cell(cell.row, 2).value,
            'surname': users_sheet.cell(cell.row, 3).value,
            'position': users_sheet.cell(cell.row, 4).value
        }
        cache[cache_key] = user_data
        return user_data
    except:
        return None


async def log_error(user_id: str, error: str):
    logs_sheet.append_row([
        datetime.now().strftime("%d.%m.%Y %H:%M"),
        user_id,
        "ERROR",
        error
    ])


def get_supplier_dates_sheet(shop_number: str):
    cache_key = f"supplier_{shop_number}"
    if cache_key in cache:
        return FakeSheet(cache[cache_key])
    
    sheet = orders_spreadsheet.worksheet(f"–î–∞—Ç—ã –≤—ã—Ö–æ–¥–æ–≤ –∑–∞–∫–∞–∑–æ–≤ {shop_number}")
    data = sheet.get_all_records()
    cache[cache_key] = data
    return FakeSheet(data)


def calculate_delivery_date(supplier_data: dict) -> tuple:
    today = datetime.now()
    current_weekday = today.isoweekday()

    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞
    nearest_day = None
    for day in sorted(supplier_data['order_days']):
        if day >= current_weekday:
            nearest_day = day
            break
    if not nearest_day:
        nearest_day = min(supplier_data['order_days'])
    delta_days = (nearest_day - current_weekday) % 7
    order_date = today + timedelta(days=delta_days)

    # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –ø–æ—Å—Ç–∞–≤–∫–∏
    delivery_date = order_date + timedelta(days=supplier_data['delivery_days'])
    return (
        order_date.strftime("%d.%m.%Y"),
        delivery_date.strftime("%d.%m.%Y")
    )


# ========================== –ü–ê–†–°–ï–† ===========================
async def get_product_info(article: str, shop: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
    try:
        print(f"[INFO] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ get_product_info –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {article}, –º–∞–≥–∞–∑–∏–Ω: {shop}")
        
        gamma_data = cache.get("gamma_cluster", [])
        print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ gamma_cluster –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop}")

        product_data = next(
            (item for item in gamma_data
             if str(item.get("–ê—Ä—Ç–∏–∫—É–ª", "")).strip() == str(article).strip()
             and str(item.get("–ú–∞–≥–∞–∑–∏–Ω", "")).strip() == str(shop).strip()),
            None
        )
        
        if not product_data:
            print(f"[ERROR] –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {article}, –º–∞–≥–∞–∑–∏–Ω: {shop}")
            return None

        print(f"[INFO] –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {article}, –º–∞–≥–∞–∑–∏–Ω: {shop}")

        supplier_id = str(product_data.get("–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.", "")).strip()
        supplier_sheet = get_supplier_dates_sheet(shop)
        supplier_data = next(
            (item for item in supplier_sheet.data 
             if str(item.get("–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.", "")).strip() == supplier_id),
            None
        )
        
        if not supplier_data:
            print(f"[ERROR] –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {article}, –º–∞–≥–∞–∑–∏–Ω: {shop}")
            return {
                'article': article,
                'product_name': product_data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''),
                'department': str(product_data.get('–û—Ç–¥–µ–ª', '')),
                'shop': shop,
                'supplier_status': '–¢–æ–≤–∞—Ä –†–¶'
            }

        print(f"[INFO] –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {article}, –º–∞–≥–∞–∑–∏–Ω: {shop}")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (—Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–æ–ª–±–µ—Ü –ø–æ—Å–ª–µ ID)
        headers = supplier_sheet.headers
        supplier_id_index = headers.index("–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.")
        supplier_name = list(supplier_data.values())[supplier_id_index + 1]

        parsed_supplier = parse_supplier_data(supplier_data)
        order_date, delivery_date = calculate_delivery_date(parsed_supplier)

        supplier_name = supplier_data.get("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω. –ø–æ—Å—Ç.", "–ù–µ —É–∫–∞–∑–∞–Ω–æ").strip()

        print(f"[INFO] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: {article}, –º–∞–≥–∞–∑–∏–Ω: {shop}")
        
        return {
            'article': article,
            'product_name': product_data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''),
            'department': str(product_data.get('–û—Ç–¥–µ–ª', '')),
            'order_date': order_date,
            'delivery_date': delivery_date,
            'supplier_id': supplier_id,
            'supplier_name': supplier_name,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
            'shop': shop,
            'parsed_supplier': parsed_supplier
        }
        
    except (ValueError, IndexError) as e:
        logging.error(f"Supplier name error: {str(e)}")
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(e)}")
        return None
    except Exception as e:
        logging.error(f"Product info error: {str(e)}")
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ get_product_info: {str(e)}")
        return None


# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====================
@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    user_data = await get_user_data(str(message.from_user.id))
    if user_data:
        await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=main_menu_keyboard())
        return
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove()
    )
    await log_user_activity(message.from_user.id, "/start", "registration")
    await state.set_state(Registration.name)


@dp.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    await state.update_data(name=message.text.strip())
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Registration.surname)


@dp.message(Registration.surname)
async def process_surname(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    await state.update_data(surname=message.text.strip())
    await message.answer("üíº –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
    await state.set_state(Registration.position)


@dp.message(Registration.position)
async def process_position(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    await state.update_data(position=message.text.strip())
    await message.answer("üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –Ω—É–ª–µ–π):")
    await state.set_state(Registration.shop)


@dp.message(Registration.shop)
async def process_shop(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    if not message.text.strip().isdigit():
        await message.answer("‚ùå –ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    data = await state.get_data()
    try:
        users_sheet.append_row([
            str(message.from_user.id),
            data['name'],
            data['surname'],
            data['position'],
            message.text.strip(),
            datetime.now().strftime("%d.%m.%Y %H:%M")
        ])
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")
        await log_error(str(message.from_user.id), str(e))


@dp.message(F.text == "üõí –ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞")
async def handle_client_order(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    user_data = await get_user_data(str(message.from_user.id))
    
    if not user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    
    await state.update_data(
        shop=user_data['shop'],
        user_name=user_data['name'],
        user_position=user_data['position']
    )
    
    # –í–∞–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:
    await message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=article_input_keyboard()
    )
    await log_user_activity(message.from_user.id, "–ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞", "order")
    await state.set_state(OrderStates.article_input)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
@dp.message(OrderStates.article_input)
async def process_article(message: types.Message, state: FSMContext):
    article = message.text.strip()
    await state.update_data(article=article)    
    await message.answer(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:",
        reply_markup=shop_selection_keyboard()
    )
    await state.set_state(OrderStates.shop_selection)


@dp.message(OrderStates.shop_input)
async def process_custom_shop(message: types.Message, state: FSMContext):
    shop = message.text.strip()
    if not shop.isdigit() or shop.startswith('0'):
        await message.answer("‚ùó –ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –±–µ–∑ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    await state.update_data(selected_shop=shop)
    await message.answer("‚úÖ –ú–∞–≥–∞–∑–∏–Ω –≤—ã–±—Ä–∞–Ω", reply_markup=ReplyKeyboardRemove())
    await process_article_continuation(message, state)

@dp.message(OrderStates.shop_selection)
async def process_shop_selection(message: types.Message, state: FSMContext):
    user_data = await get_user_data(str(message.from_user.id))
    
    if message.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–π –º–∞–≥–∞–∑–∏–Ω":
        selected_shop = user_data['shop']
    elif message.text == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π":
        await message.answer(
            "üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π):",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(OrderStates.shop_input)
        return
    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer(
            "‚ùå –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=main_menu_keyboard()
        )
        await state.clear()
        return
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é",
            reply_markup=shop_selection_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –≤ FSM
    await state.update_data(selected_shop=selected_shop)
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    await process_article_continuation(message, state)


async def process_article_continuation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    article = data.get('article')
    selected_shop = data.get('selected_shop')
    
    product_info = await get_product_info(article, selected_shop)
    if not product_info:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ")
        await state.clear()
        return

    response = (
        f"–ú–∞–≥–∞–∑–∏–Ω: {selected_shop}\n"
        f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {product_info['article']}\n"
        f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['product_name']}\n"
        f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {product_info['supplier_name']}\n" 
        f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {product_info['order_date']}\n"
        f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {product_info['delivery_date']}\n"
        
    )
    
    await state.update_data(
        article=product_info['article'],
        product_name=product_info['product_name'],
        department=product_info['department'],
        order_date=product_info['order_date'],
        delivery_date=product_info['delivery_date'],
        supplier_id=product_info['supplier_id'],
        supplier_name=product_info['supplier_name']
    )
    
    await message.answer(response)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(OrderStates.quantity_input)

def parse_supplier_data(record):
    order_days = []
    for key in ['–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞', '–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ 2', '–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ 3']:
        value = str(record.get(key, '')).strip()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ strip()
        if value and value.isdigit():
            order_days.append(int(value))
    
    delivery_days = str(record.get('–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω', '0')).strip()
    return {
        'supplier_id': str(record.get('–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.', '')),
        'order_days': sorted(list(set(order_days))),
        'delivery_days': int(delivery_days) if delivery_days.isdigit() else 0
    }


@dp.message(OrderStates.quantity_input)
async def process_quantity(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    if not message.text.strip().isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    data = await state.get_data()
    await state.update_data(quantity=int(message.text.strip()))
    # –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—ã
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—É:")
    await state.set_state(OrderStates.order_reason_input)


@dp.message(OrderStates.order_reason_input)
async def process_order_reason(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    data = await state.get_data()
    order_reason = message.text.strip()
    selected_shop = data.get('selected_shop')
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(order_reason=order_reason)
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await message.answer(
        f"–ú–∞–≥–∞–∑–∏–Ω: {selected_shop}\n"
        f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {data['article']}\n"
        f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {data['product_name']}\n"
        f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {data['supplier_name']}\n" 
        f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {data['order_date']}\n"
        f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_date']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞/–ü—Ä–∏—á–∏–Ω–∞: {order_reason}\n",
        reply_markup=confirm_keyboard()
    )
    await state.set_state(OrderStates.confirmation)


@dp.message(OrderStates.confirmation, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def final_confirmation(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    data = await state.get_data()
    selected_shop = data['selected_shop']
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['selected_shop', 'article', 'order_reason', 'quantity', 'department']
        for field in required_fields:
            if data.get(field) is None:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")

        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç –æ—Ç–¥–µ–ª–∞
        department_sheet = orders_spreadsheet.worksheet(data['department'])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º next_row –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        try:
            next_row = len(department_sheet.col_values(1)) + 1
        except APIError as e:
            logging.error(f"–û—à–∏–±–∫–∞ Google Sheets: {str(e)}")
            next_row = 1  # –ù–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updates = [
            {'range': f'A{next_row}', 'values': [[selected_shop]]},
            {'range': f'B{next_row}', 'values': [[int(data['article'])]]},
            {'range': f'C{next_row}', 'values': [[data['order_reason']]]},
            {'range': f'D{next_row}', 'values': [[datetime.now().strftime("%d.%m.%Y %H:%M")]]},
            {'range': f'E{next_row}', 'values': [[f"{data['user_name']}, {data['user_position']}"]]},
            {'range': f'K{next_row}', 'values': [[int(data['quantity'])]]},
            {'range': f'R{next_row}', 'values': [[int(message.from_user.id)]]}
        ]

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        department_sheet.batch_update(updates)
        await message.answer("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=main_menu_keyboard())
        await log_user_activity(message.from_user.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å","Confirmation")
        await state.clear()

    except Exception as e:
        await log_error(message.from_user.id, f"Save Error: {str(e)}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

@dp.message(OrderStates.confirmation, F.text == "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
async def correct_quantity(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderStates.quantity_input)


@dp.message(OrderStates.confirmation, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_order(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard())

@dp.message(OrderStates.shop_selection, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@dp.message(OrderStates.shop_input, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_shop_selection(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Ç–º–µ–Ω—ë–Ω", reply_markup=main_menu_keyboard())

@dp.message(OrderStates.article_input, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_order_process(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
@dp.message(OrderStates.quantity_input, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_order_process(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
@dp.message(OrderStates.order_reason_input, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_order_process(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())


@dp.message(F.text == "üìã –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
async def handle_info_request(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    await log_user_activity(message.from_user.id, "–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "info")
    user_data = await get_user_data(str(message.from_user.id))
    if not user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
        
    await state.update_data(shop=user_data['shop'])
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:", reply_markup=article_input_keyboard())
    await state.set_state(InfoRequest.article_input)


@dp.message(InfoRequest.article_input)
async def process_info_request(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    article = message.text.strip()
    data = await state.get_data()
    user_shop = data['shop']
    
    product_info = await get_product_info(article, user_shop)
    if not product_info:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    response = (
        f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {user_shop}\n"
        f"üì¶–ê—Ä—Ç–∏–∫—É–ª: {product_info['article']}\n"
        f"üè∑Ô∏è–ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['product_name']}\n"
        f"üî¢–û—Ç–¥–µ–ª: {product_info['department']}\n"
        f"üìÖ–ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {product_info['order_date']}\n"
        f"üöö–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {product_info['delivery_date']}\n"
        f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {product_info['supplier_name']}" 
    )
    
    await message.answer(response, reply_markup=main_menu_keyboard())
    await state.clear()


@dp.message(F.text == "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞")
async def handle_stock_check(message: types.Message):
    await message.answer("üõ†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


@dp.message(F.text == "/reload_cache")
async def reload_cache_command(message: types.Message):  # –ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        cache.clear()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await cache_sheet_data(users_sheet, "users")
        await cache_sheet_data(gamma_cluster_sheet, "gamma_cluster")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        gamma_data = cache.get("gamma_cluster", [])
        test_article = gamma_data[0].get("–ê—Ä—Ç–∏–∫—É–ª") if gamma_data else None
        response = (
            f"‚úÖ –ö—ç—à –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(cache['users'])}\n"
            f"‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {len(gamma_data)}\n"
            f"‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª: {test_article or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
        )
        
        await message.answer(response)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {str(e)}"
        print(error_msg)
        await message.answer(error_msg)



@dp.message(F.text == "/debug_article")
async def debug_article(message: types.Message):
    try:
        gamma_data = cache.get("gamma_cluster", [])
        if not gamma_data:
            await message.answer("‚ùå –ö—ç—à —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç")
            return
            
        sample_item = gamma_data[0]
        debug_info = (
            f"üîç –ü—Ä–∏–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –∫—ç—à–∞:\n"
            f"–¢–∏–ø –∞—Ä—Ç–∏–∫—É–ª–∞: {type(sample_item.get('–ê—Ä—Ç–∏–∫—É–ª'))}\n"
            f"–ó–Ω–∞—á–µ–Ω–∏–µ: {sample_item.get('–ê—Ä—Ç–∏–∫—É–ª')}\n"
            f"–í—Å–µ –∫–ª—é—á–∏: {list(sample_item.keys())}"
        )
        await message.answer(debug_info)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")



@dp.message(F.text == "/check_cache")
async def check_cache(message: types.Message):
    gamma_data = cache.get("gamma_cluster", [])
    response = (
        f"–ö—ç—à gamma_cluster: {len(gamma_data)} –∑–∞–ø–∏—Å–µ–π\n"
        f"–ü—Ä–∏–º–µ—Ä: {gamma_data[:1] if gamma_data else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
    )
    await message.answer(response)

#===========================–†–∞—Å—Å—ã–ª–∫–∞==================================


# ===================== –†–ê–°–°–´–õ–ö–ê =====================
@dp.message(Command("broadcast"))
async def start_broadcast(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    if message.from_user.id not in ADMINS:
        return
    await message.answer(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ —Å –º–µ–¥–∏–∞-–≤–ª–æ–∂–µ–Ω–∏—è–º–∏):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AdminBroadcast.message_input)

@dp.message(AdminBroadcast.message_input)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    content = {
        'text': message.html_text,
        'media': None,
        'type': 'text'
    }
    if message.photo:
        content.update({
            'type': 'photo',
            'media': message.photo[-1].file_id,
            'caption': message.caption
        })
    elif message.document:
        content.update({
            'type': 'document',
            'media': message.document.file_id,
            'caption': message.caption
        })
    await state.update_data(content=content)
    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    preview_text = "‚úâÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
    if content['type'] == 'text':
        preview_text += content['text']
    else:
        preview_text += f"[{content['type'].upper()}] {content.get('caption', '')}"
    await message.answer(
        preview_text,
        reply_markup=target_selection_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    )
    await state.set_state(AdminBroadcast.target_selection)

@dp.message(AdminBroadcast.target_selection)
async def handle_target_selection(message: types.Message, state: FSMContext):
    if message.text == "–í—Å–µ–º":
        await state.update_data(target="all")
        await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", reply_markup=broadcast_confirmation_keyboard())
        await state.set_state(AdminBroadcast.confirmation)
    elif message.text == "–í—Ä—É—á–Ω—É—é":
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(AdminBroadcast.manual_ids)
    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_menu_keyboard())
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=target_selection_keyboard())

@dp.message(AdminBroadcast.manual_ids)
async def process_manual_ids(message: types.Message, state: FSMContext):
    user_ids = [id.strip() for id in message.text.split(",") if id.strip().isdigit()]
    if not user_ids:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    await state.update_data(target="manual", user_ids=user_ids)
    await message.answer("‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–≤–µ–¥–µ–Ω—ã", reply_markup=broadcast_confirmation_keyboard())
    await state.set_state(AdminBroadcast.confirmation)

@dp.message(AdminBroadcast.confirmation, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def confirm_broadcast(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    data = await state.get_data()
    content = data['content']
    target = data.get('target', 'all')
    user_ids = data.get('user_ids')
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥–∏
    logs_sheet.append_row([
        datetime.now().strftime("%d.%m.%Y %H:%M"),
        message.from_user.id,
        "BROADCAST",
        f"Type: {content['type']}, Chars: {len(content.get('text', '') or content.get('caption', ''))}"
    ])
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...", reply_markup=main_menu_keyboard())
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
    asyncio.create_task(send_broadcast(content, target, user_ids))
    await state.clear()

async def send_broadcast(content: dict, target: str, user_ids: list = None):
    if target == "all":
        users = users_sheet.col_values(1)[1:]  # ID –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ A
    elif target == "manual":
        users = user_ids  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ ID
    else:
        users = []

    success = 0
    failed = 0
    for user_id in users:
        try:
            if content['type'] == 'text':
                await bot.send_message(
                    chat_id=int(user_id),
                    text=content['text'],
                    parse_mode=None
                )
            elif content['type'] == 'photo':
                await bot.send_photo(
                    chat_id=int(user_id),
                    photo=content['media'],
                    caption=content.get('caption', ''),
                    parse_mode=None
                )
            elif content['type'] == 'document':
                await bot.send_document(
                    chat_id=int(user_id),
                    document=content['media'],
                    caption=content.get('caption', ''),
                    parse_mode=None
                )
            success += 1
            await asyncio.sleep(0.1)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
        except Exception as e:
            failed += 1
            logging.error(f"Broadcast error to {user_id}: {str(e)}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
    await bot.send_message(
        chat_id=ADMINS[0],
        text=f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )




#================================–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞==========================================#


STATS_COLUMNS = [
    "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "User ID", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", 
    "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ú–∞–≥–∞–∑–∏–Ω", "–ö–æ–º–∞–Ω–¥–∞", "–¢–∏–ø —Å–æ–±—ã—Ç–∏—è"
]

async def log_user_activity(user_id: str, command: str, event_type: str = "command"):
    """–ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_data = await get_user_data(str(user_id))
        if not user_data:
            return
            
        stats_sheet = main_spreadsheet.worksheet(STATSS_SHEET_NAME)
        stats_sheet.append_row([
            datetime.now().strftime("%d.%m.%Y"),
            datetime.now().strftime("%H:%M:%S"),
            str(user_id),
            user_data.get('name', ''),
            user_data.get('surname', ''),
            user_data.get('position', ''),
            user_data.get('shop', ''),
            command,
            event_type
        ])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")




# ===================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====================
ORDERS_SHEET_NAMES = [str(i) for i in range(1, 16)]
CHECK_INTERVAL = 3600  # 60 –º–∏–Ω—É—Ç
STATS_SHEET_NAME = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"

COLUMNS = {
    'article': '–ê—Ä—Ç–∏–∫—É–ª', # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –í
    'order_number': '–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ ‚Ññ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞',   # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –°
    'name' : '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ F
    'order_date': '–î–∞—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞ –ú–ó',      # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ P
    'order_id': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ú–ó \ ‚Ññ –∑–∞–∫–∞–∑–∞',          # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ Q
    'chat_id': 'id_user',             # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ R
    'notified': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'            # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ S
}



# ===================== –ó–ê–ü–£–°–ö –§–û–ù–û–í–´–• –ó–ê–î–ê–ß =====================
async def scheduled_notifications_checker():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("üöÄ –ó–∞–ø—É—â–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    while True:
        try:
            await check_orders_notifications()
            print(f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL/60} –º–∏–Ω—É—Ç")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ scheduled_notifications_checker: {str(e)}")
        await asyncio.sleep(CHECK_INTERVAL)



# ===================== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====================
from tenacity import retry, stop_after_attempt, wait_exponential

@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=2, max=10))
async def check_orders_notifications():
    try:
        spreadsheet = client.open(ORDERS_SPREADSHEET_NAME)
        stats_sheet = spreadsheet.worksheet(STATS_SHEET_NAME)
        for sheet_name in ORDERS_SHEET_NAMES:
            try:
                worksheet = spreadsheet.worksheet(sheet_name)
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –∏—Ö –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–æ–∫
                all_records = worksheet.get_all_records()
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
                for idx, record in enumerate(all_records, start=2):
                    record['row_number'] = idx
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                filtered_records = [
                    r for r in all_records
                    if (
                        r.get(COLUMNS['order_date']) and  # –ü—Ä–æ–≤–µ—Ä–∫–∞ "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"
                        r.get(COLUMNS['order_id']) and    # –ü—Ä–æ–≤–µ—Ä–∫–∞ "ID –∑–∞–∫–∞–∑–∞"
                        r.get(COLUMNS['chat_id']) and     # –ü—Ä–æ–≤–µ—Ä–∫–∞ "Chat ID"
                        not r.get(COLUMNS['notified'])    # –ü—Ä–æ–≤–µ—Ä–∫–∞ "Notified"
                    )
                ]
                print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(filtered_records)}")
                for record in filtered_records:
                    await process_order_record(worksheet, stats_sheet, record['row_number'], record)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –ª–∏—Å—Ç–µ {sheet_name}: {str(e)}")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_orders_notifications: {str(e)}")

    except APIError as e:
        logging.error(f"Google API Error: {str(e)}")
    except Exception as e:
        logging.error(f"Unexpected error: {str(e)}")


# ===================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í–û–ì–û –†–ï–ñ–ò–ú–ê =====================
TEST_MODE = False  # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ False –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

#===================== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====================
async def process_order_record(worksheet, stats_sheet, row_num, record):
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ {row_num}: {record}")  # –õ–æ–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø–∏—Å–∏
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['order_number', 'order_date', 'order_id']
        missing = [field for field in required_fields if not record.get(COLUMNS[field])]
        if missing:
            raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing)}")
        
        chat_id = str(record[COLUMNS['chat_id']]).strip()
        # –í–∞–ª–∏–¥–∞—Ü–∏—è chat_id
        if not chat_id.isdigit():
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π Chat ID: {chat_id}")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if TEST_MODE and chat_id not in map(str, ADMINS):
            logging.info(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫ chat_id {chat_id}")
            return
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (
            f"üõ†Ô∏è–í–∞—à –ó–∞–∫–∞–∑ ‚Ññ {record[COLUMNS['order_number']]} –æ—Ñ–æ—Ä–º–ª–µ–Ω\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {record[COLUMNS['article']]}\n"
            f"üè∑Ô∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {record[COLUMNS['name']]}\n"
            f"üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞—â–∏–∫—É/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π : {record[COLUMNS['order_id']]}"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if TEST_MODE:
            message = "[–¢–ï–°–¢] " + message
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await bot.send_message(chat_id=int(chat_id), text=message)
            status = "‚úÖ –£—Å–ø–µ—à–Ω–æ"
        except TelegramForbiddenError:
            status = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
        except Exception as e:
            status = f"–û—à–∏–±–∫–∞: {str(e)}"
            raise
        except KeyError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
        stats_sheet.append_row([
            datetime.now().strftime("%d.%m.%Y %H:%M"),
            "N/A",
            chat_id,
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        ])
        return
    except Exception as e:
        
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_record = [
            datetime.now().strftime("%d.%m.%Y %H:%M"),
            record[COLUMNS['order_number']],  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ COLUMNS!
            chat_id,
            status
        ]
        stats_sheet.append_row(stats_record)
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ª–∏—Å—Ç–µ
        status_code = status.split(':')[0][:2] # 1 - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ S{row_num}: {status_code}")
        worksheet.update_cell(int(row_num), 19, status_code) # 19 –∑–¥–µ—Å—å –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ S –ì–¥–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ {row_num}, —Å—Ç–æ–ª–±–µ—Ü S: {status_code}")
        
    except KeyError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        stats_sheet.append_row([
            datetime.now().strftime("%d.%m.%Y %H:%M"),
            "N/A",
            chat_id,
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        ])
        return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        stats_sheet.append_row([
            datetime.now().strftime("%d.%m.%Y %H:%M"),
            record.get(COLUMNS['order_number'], 'N/A'),
            chat_id,
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        ])
        return

# ===================== –û–ë–©–ê–Ø –õ–û–ì–ò–ö–ê –ó–ê–ü–£–°–ö–ê =====================
async def scheduled_cache_update():
    while True:
        await asyncio.sleep(3600 * 12)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
        try:
            await preload_cache()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {str(e)}")

async def startup():
    asyncio.create_task(scheduled_cache_update())
    if TEST_MODE:
        await notify_admins("üîß –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –¢–ï–°–¢–û–í–û–ú –†–ï–ñ–ò–ú–ï. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    
    
    asyncio.create_task(scheduled_notifications_checker())
    """–û–±—â–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤"""
    startup_msg = "üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"
    print(startup_msg)
    try:  # <-- –û—Ç—Å—Ç—É–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Å print(startup_msg)
        print("‚ôªÔ∏è –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞...")
        await preload_cache()
        print(f"‚úÖ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω. –ö–ª—é—á–∏: {list(cache.keys())[:5]}...")
        await notify_admins(startup_msg)
    except Exception as e:
        error_msg = f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}"
        print(error_msg)
        await notify_admins(error_msg)
        raise

async def shutdown():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤"""
    try:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–π AIOHTTP
        await bot.session.close()
        await dp.storage.close()
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–µ–±—Ö—É–∫–∞
        if USE_WEBHOOKS:
            await bot.delete_webhook()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {str(e)}")
        
    finally:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        for task in tasks:
            task.cancel()



# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–ï–ë–•–£–ö–û–í =====================
async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤"""
    update_data = await request.json()
    update = types.Update(**update_data)
    await dp.feed_update(bot=bot, update=update)
    return web.Response(text="OK", status=200)

# ===================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====================
app = web.Application()
if USE_WEBHOOKS:
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.on_startup.append(lambda _: startup())
    app.on_shutdown.append(lambda _: shutdown())

# ===================== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö =====================
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    await startup()
    
    if USE_WEBHOOKS:
        # –¢–æ–ª—å–∫–æ –≤ –≤–µ–±—Ö—É–∫-—Ä–µ–∂–∏–º–µ
        await bot.set_webhook(
            url=WEBHOOK_URL,
            drop_pending_updates=True
        )
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', WEBHOOK_PORT)
        await site.start()
        print(f"‚úÖ –†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–æ–≤: {WEBHOOK_URL}")
        while True:
            await asyncio.sleep(3600)
    else:
        # –†–µ–∂–∏–º –ø–æ–ª–ª–∏–Ω–≥–∞
        print("‚úÖ –†–µ–∂–∏–º –ø–æ–ª–ª–∏–Ω–≥–∞")
        await dp.start_polling(bot, skip_updates=True)

# ===================== –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ =====================
async def shutdown():
    try:
        if USE_WEBHOOKS:
            await bot.delete_webhook()
        await bot.session.close()
        await dp.storage.close()
    except Exception as e:
        logging.error(f"Shutdown error: {str(e)}")
    finally:
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        for task in tasks:
            task.cancel()
if __name__ == "__main__":
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        print("\nüõë Bot stopped by user")
    except Exception as e:
        logging.critical(f"Critical error: {str(e)}")
    finally:
        loop.run_until_complete(shutdown())
        loop.close()
