import os
import json
import pickle
import io
import re
import gc
import asyncio
import logging
from pyzbar.pyzbar import decode
from PIL import Image
from concurrent.futures import ThreadPoolExecutor
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import Command
from contextlib import suppress
from google.oauth2.service_account import Credentials
import gspread
from gspread.exceptions import APIError, SpreadsheetNotFound
from cachetools import LRUCache
import psutil

# ===================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
)

# –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º
SERVICE_MODE = False
ADMINS = [122086799, 5183727015]

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
CACHE_TTL = 43200  # 12 —á–∞—Å–æ–≤
cache = LRUCache(maxsize=500)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv('secret.env')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
try:
    BOT_TOKEN = os.environ['BOT_TOKEN']
    GOOGLE_CREDS_JSON = os.environ['GOOGLE_CREDENTIALS']
except KeyError as e:
    raise RuntimeError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {e}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets
GOOGLE_CREDS = json.loads(GOOGLE_CREDS_JSON)
SPREADSHEET_NAME = "ShopBotData"
STATSS_SHEET_NAME = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
ORDERS_SPREADSHEET_NAME = "–ö–æ–ø–∏—è –ó–∞–∫–∞–∑—ã –ú–ó 0.2"
USERS_SHEET_NAME = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
GAMMA_CLUSTER_SHEET = "–ì–∞–º–º–∞ –∫–ª–∞—Å—Ç–µ—Ä"
LOGS_SHEET = "–õ–æ–≥–∏"
BARCODES_SHEET_NAME = "–®—Ç—Ä–∏—Ö-–∫–æ–¥—ã"
MAX_IMAGE_SIZE = 2_000_000
MAX_WORKERS = 4

# ===================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====================
credentials = Credentials.from_service_account_info(
    GOOGLE_CREDS,
    scopes=['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
)
client = gspread.authorize(credentials)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
try:
    main_spreadsheet = client.open(SPREADSHEET_NAME)
    users_sheet = main_spreadsheet.worksheet(USERS_SHEET_NAME)
    logs_sheet = main_spreadsheet.worksheet(LOGS_SHEET)
    orders_spreadsheet = client.open(ORDERS_SPREADSHEET_NAME)
    gamma_cluster_sheet = orders_spreadsheet.worksheet(GAMMA_CLUSTER_SHEET)
    print("‚úÖ Google Sheets —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {str(e)}")
    exit()

image_processor = ThreadPoolExecutor(max_workers=MAX_WORKERS)

# ===================== –°–û–°–¢–û–Ø–ù–ò–Ø FSM =====================
class Registration(StatesGroup):
    name = State()
    surname = State()
    position = State()
    shop = State()

class OrderStates(StatesGroup):
    article_input = State()
    shop_selection = State()
    shop_input = State()
    quantity_input = State()
    order_reason_input = State()
    confirmation = State()

class InfoRequest(StatesGroup):
    article_input = State()

class AdminBroadcast(StatesGroup):
    message_input = State()
    target_selection = State()
    manual_ids = State()
    confirmation = State()

# ===================== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====================
def create_keyboard(buttons: List[str], sizes: tuple, resize=True, one_time=False) -> types.ReplyKeyboardMarkup:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    builder = ReplyKeyboardBuilder()
    for button in buttons:
        builder.button(text=button)
    builder.adjust(*sizes)
    return builder.as_markup(
        resize_keyboard=resize,
        one_time_keyboard=one_time
    )

def main_menu_keyboard(user_id: int = None) -> types.ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤"""
    buttons = ["üìã –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞", "üõí –ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞"]
    if user_id and user_id in ADMINS:
        buttons.append("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    return create_keyboard(buttons, (2, 1, 1))

def article_input_keyboard() -> types.ReplyKeyboardMarkup:
    return create_keyboard(
        ["üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥", "‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", "‚ùå –û—Ç–º–µ–Ω–∞", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"],
        (2, 2)
    )

def shop_selection_keyboard() -> types.ReplyKeyboardMarkup:
    return create_keyboard(
        ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–π –º–∞–≥–∞–∑–∏–Ω", "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π", "‚ùå –û—Ç–º–µ–Ω–∞"],
        (2, 1)
    )

def confirm_keyboard() -> types.ReplyKeyboardMarkup:
    return create_keyboard(
        ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "‚ùå –û—Ç–º–µ–Ω–∞"],
        (2, 1)
    )

def admin_panel_keyboard() -> types.ReplyKeyboardMarkup:
    return create_keyboard(
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à", "üîß –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
        (2, 2, 1)
    )

def service_mode_keyboard() -> types.ReplyKeyboardMarkup:
    return create_keyboard(
        ["üü¢ –í–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º", "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º", "üîô –ù–∞–∑–∞–¥"],
        (2, 1)
    )

def cancel_keyboard() -> types.ReplyKeyboardMarkup:
    return create_keyboard(["‚ùå –û—Ç–º–µ–Ω–∞"], (1,))

# ===================== –°–ï–†–í–ò–°–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================
async def notify_admins(message: str) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    for admin_id in ADMINS:
        with suppress(TelegramForbiddenError):
            await bot.send_message(admin_id, message)

async def toggle_service_mode(enable: bool) -> None:
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    global SERVICE_MODE
    SERVICE_MODE = enable
    status = "–í–ö–õ–Æ–ß–ï–ù" if enable else "–í–´–ö–õ–Æ–ß–ï–ù"
    await notify_admins(f"üõ† –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º {status}")

async def get_user_data(user_id: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = f"user_{user_id}"
    if cache_key in cache:
        return cache[cache_key]
    
    try:
        users_data = pickle.loads(cache.get("users_data", b""))
        if not users_data:
            users_data = users_sheet.get_all_records()
            cache["users_data"] = pickle.dumps(users_data)
        
        for user in users_data:
            if str(user.get("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "")).strip() == str(user_id).strip():
                user_data = {
                    'shop': user.get("–ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞", ""),
                    'name': user.get("–ò–º—è", ""),
                    'surname': user.get("–§–∞–º–∏–ª–∏—è", ""),
                    'position': user.get("–î–æ–ª–∂–Ω–æ—Å—Ç—å", "")
                }
                cache[cache_key] = user_data
                return user_data
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        return None

async def log_error(user_id: str, error: str) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    try:
        logs_sheet.append_row([
            datetime.now().strftime("%d.%m.%Y %H:%M"),
            user_id,
            "ERROR",
            error
        ])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

async def log_user_activity(user_id: str, command: str, event_type: str = "command") -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_data = await get_user_data(str(user_id))
        if not user_data:
            return
            
        record = [
            datetime.now().strftime("%d.%m.%Y"),
            datetime.now().strftime("%H:%M:%S"),
            str(user_id),
            user_data.get('name', ''),
            user_data.get('surname', ''),
            user_data.get('position', ''),
            user_data.get('shop', ''),
            command,
            event_type
        ]
        
        stats_sheet = main_spreadsheet.worksheet(STATSS_SHEET_NAME)
        stats_sheet.append_row(record)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}")

def parse_supplier_data(record: dict) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    order_days = []
    for key in ['–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞', '–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ 2', '–î–µ–Ω—å –≤—ã—Ö–æ–¥–∞ –∑–∞–∫–∞–∑–∞ 3']:
        value = str(record.get(key, '')).strip()
        if value and value.isdigit():
            order_days.append(int(value))
    
    delivery_days = str(record.get('–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω', '0')).strip()
    return {
        'supplier_id': str(record.get('–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.', '')),
        'order_days': sorted(list(set(order_days))),
        'delivery_days': int(delivery_days) if delivery_days.isdigit() else 0
    }

def calculate_delivery_date(supplier_data: dict) -> Tuple[str, str]:
    """–†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
    today = datetime.now()
    current_weekday = today.isoweekday()

    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞
    nearest_day = None
    for day in sorted(supplier_data['order_days']):
        if day >= current_weekday:
            nearest_day = day
            break
    if not nearest_day:
        nearest_day = min(supplier_data['order_days'])
    
    delta_days = (nearest_day - current_weekday) % 7
    order_date = today + timedelta(days=delta_days)
    delivery_date = order_date + timedelta(days=supplier_data['delivery_days'])
    
    return (
        order_date.strftime("%d.%m.%Y"),
        delivery_date.strftime("%d.%m.%Y")
    )

async def process_barcode_image(photo: types.PhotoSize) -> Tuple[Optional[str], Optional[str]]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤
        if "barcodes_index" not in cache or not cache["barcodes_index"]:
            return None, "–°–∏—Å—Ç–µ–º–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file = await bot.get_file(photo.file_id)
        image_bytes = await bot.download(file.file_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        if len(image_bytes) > MAX_IMAGE_SIZE:
            return None, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (> {MAX_IMAGE_SIZE//1024}KB)"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_running_loop()
        image = None
        
        try:
            with io.BytesIO(image_bytes) as buffer:
                image = await loop.run_in_executor(image_processor, Image.open, buffer)
                image = image.convert('L')
                image.thumbnail((800, 800))
                
                decoded_objects = await asyncio.wait_for(
                    loop.run_in_executor(image_processor, decode, image),
                    timeout=10.0
                )
        finally:
            if image:
                image.close()
            del image_bytes
            gc.collect()
        
        if not decoded_objects:
            return None, "–®—Ç—Ä–∏—Ö-–∫–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"
        
        barcode_data = decoded_objects[0].data.decode("utf-8").strip()
        barcodes_index = pickle.loads(cache["barcodes_index"])
        article = barcodes_index.get(barcode_data)
        
        return article, None if article else f"–®—Ç—Ä–∏—Ö-–∫–æ–¥ {barcode_data} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞: {str(e)}")
        return None, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

async def get_product_info(article: str, shop: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
    try:
        gamma_index = pickle.loads(cache.get("gamma_index", b""))
        key = (str(article).strip(), str(shop).strip())
        product_data = gamma_index.get(key)
        
        if not product_data:
            return None
        
        supplier_id = str(product_data.get("–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.", "")).strip()
        supplier_list = get_supplier_dates_sheet(shop)
        
        # –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier_data = next(
            (item for item in supplier_list 
             if str(item.get("–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.", "")).strip() == supplier_id),
            None
        )
        
        if not supplier_data:
            return {
                '–ê—Ä—Ç–∏–∫—É–ª': article,
                '–ù–∞–∑–≤–∞–Ω–∏–µ': product_data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''),
                '–û—Ç–¥–µ–ª': str(product_data.get('–û—Ç–¥–µ–ª', '')),
                '–ú–∞–≥–∞–∑–∏–Ω': shop,
                '–ü–æ—Å—Ç–∞–≤—â–∏–∫': '–¢–æ–≤–∞—Ä –†–¶'
            }
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier_name = supplier_data.get("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω. –ø–æ—Å—Ç.", "–ù–µ —É–∫–∞–∑–∞–Ω–æ").strip()
        parsed_supplier = parse_supplier_data(supplier_data)
        order_date, delivery_date = calculate_delivery_date(parsed_supplier)
        
        return {
            '–ê—Ä—Ç–∏–∫—É–ª': article,
            '–ù–∞–∑–≤–∞–Ω–∏–µ': product_data.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''),
            '–û—Ç–¥–µ–ª': str(product_data.get('–û—Ç–¥–µ–ª', '')),
            '–ú–∞–≥–∞–∑–∏–Ω': shop,
            '–ü–æ—Å—Ç–∞–≤—â–∏–∫': supplier_name,
            '–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞': order_date,
            '–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏': delivery_date,
            '–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': supplier_id
        }
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ: {str(e)}")
        return None

def get_supplier_dates_sheet(shop_number: str) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = f"supplier_{shop_number}"
    if cache_key in cache:
        return pickle.loads(cache[cache_key])
    
    try:
        sheet = orders_spreadsheet.worksheet(f"–î–∞—Ç—ã –≤—ã—Ö–æ–¥–æ–≤ –∑–∞–∫–∞–∑–æ–≤ {shop_number}")
        data = sheet.get_all_records()
        cache[cache_key] = pickle.dumps(data)
        return data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(e)}")
        return []

async def preload_cache() -> None:
    """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞"""
    try:
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_records = users_sheet.get_all_records()
        cache["users_data"] = pickle.dumps(users_records)
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        gamma_records = gamma_cluster_sheet.get_all_records()
        gamma_index = {}
        
        for item in gamma_records:
            article = str(item.get("–ê—Ä—Ç–∏–∫—É–ª", "")).strip()
            shop = str(item.get("–ú–∞–≥–∞–∑–∏–Ω", "")).strip()
            if article and shop:
                key = (article, shop)
                gamma_index[key] = {
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": item.get("–ù–∞–∑–≤–∞–Ω–∏–µ", ""),
                    "–û—Ç–¥–µ–ª": item.get("–û—Ç–¥–µ–ª", ""),
                    "–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.": item.get("–ù–æ–º–µ—Ä –æ—Å–Ω. –ø–æ—Å—Ç.", "")
                }
        
        cache["gamma_index"] = pickle.dumps(gamma_index)
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤
        barcodes_sheet = main_spreadsheet.worksheet(BARCODES_SHEET_NAME)
        barcodes_data = barcodes_sheet.get_all_records()
        barcodes_index = {}
        
        for record in barcodes_data:
            barcode = str(record.get("–®—Ç—Ä–∏—Ö-–∫–æ–¥", "")).strip()
            article = str(record.get("–ê—Ä—Ç–∏–∫—É–ª", "")).strip()
            if barcode and article:
                barcodes_index[barcode] = article
        
        cache["barcodes_index"] = pickle.dumps(barcodes_index)
        
        logging.info("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {str(e)}")

# ===================== MIDDLEWARES =====================
@dp.update.middleware()
async def service_mode_middleware(handler, event, data):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    if SERVICE_MODE and (event.message or event.callback_query):
        user_id = event.message.from_user.id if event.message else event.callback_query.from_user.id
        if user_id not in ADMINS:
            msg = "‚è≥ –ë–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if event.message:
                await event.message.answer(msg)
            elif event.callback_query:
                await event.callback_query.answer(msg, show_alert=True)
            return
    return await handler(event, data)

@dp.update.middleware()
async def activity_tracker_middleware(handler, event, data):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    state = data.get('state')
    if state:
        current_state = await state.get_state()
        if current_state:
            state_data = await state.get_data()
            last_activity = state_data.get('last_activity', datetime.min)
            
            if isinstance(last_activity, str):
                try:
                    last_activity = datetime.fromisoformat(last_activity)
                except ValueError:
                    last_activity = datetime.min
            
            if datetime.now() - last_activity > timedelta(minutes=20):
                await state.clear()
                if event.message:
                    await event.message.answer("üïí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                elif event.callback_query:
                    await event.callback_query.message.answer("üïí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return

            await state.update_data(last_activity=datetime.now().isoformat())
    
    return await handler(event, data)

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====================
@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.update_data(last_activity=datetime.now().isoformat())
    user_data = await get_user_data(str(message.from_user.id))
    
    if user_data:
        await message.answer("‚ÑπÔ∏è –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", 
                            reply_markup=main_menu_keyboard(message.from_user.id))
        return
    
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", 
                        reply_markup=types.ReplyKeyboardRemove())
    await log_user_activity(message.from_user.id, "/start", "registration")
    await state.set_state(Registration.name)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat(), name=message.text.strip())
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Registration.surname)

@dp.message(Registration.surname)
async def process_surname(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat(), surname=message.text.strip())
    await message.answer("üíº –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
    await state.set_state(Registration.position)

@dp.message(Registration.position)
async def process_position(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat(), position=message.text.strip())
    await message.answer("üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –Ω—É–ª–µ–π):")
    await state.set_state(Registration.shop)

@dp.message(Registration.shop)
async def process_shop(message: types.Message, state: FSMContext):
    await state.update_data(last_activity=datetime.now().isoformat())
    shop = message.text.strip()
    
    if not shop.isdigit():
        await message.answer("‚ùå –ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    
    data = await state.get_data()
    try:
        users_sheet.append_row([
            str(message.from_user.id),
            data['name'],
            data['surname'],
            data['position'],
            shop,
            datetime.now().strftime("%d.%m.%Y %H:%M")
        ])
        cache.pop(f"user_{message.from_user.id}", None)  # –°–±—Ä–æ—Å –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", 
                            reply_markup=main_menu_keyboard(message.from_user.id))
        await state.clear()
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")
        await log_error(str(message.from_user.id), str(e))

# –ù–∞–≤–∏–≥–∞—Ü–∏—è
@dp.message(F.text.in_(["‚Ü©Ô∏è –ù–∞–∑–∞–¥", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]))
async def handle_back(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                        reply_markup=main_menu_keyboard(message.from_user.id))

@dp.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        await message.answer("üîÑ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 
                            reply_markup=main_menu_keyboard(message.from_user.id))

# –ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞
@dp.message(F.text == "üõí –ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞")
async def handle_client_order(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    await state.update_data(last_activity=datetime.now().isoformat())
    user_data = await get_user_data(str(message.from_user.id))
    
    if not user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    
    await state.update_data(
        shop=user_data['shop'],
        user_name=user_data['name'],
        user_position=user_data['position']
    )
    
    await message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞:", 
                        reply_markup=article_input_keyboard())
    await log_user_activity(message.from_user.id, "–ó–∞–∫–∞–∑ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞", "order")
    await state.set_state(OrderStates.article_input)

@dp.message(OrderStates.article_input, F.text == "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥")
async def handle_scan_choice(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞\n\n"
        "–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:\n"
        "- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω\n"
        "- –î–µ—Ä–∂–∏—Ç–µ –∫–∞–º–µ—Ä—É –ø—Ä—è–º–æ –Ω–∞–ø—Ä–æ—Ç–∏–≤ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞\n"
        "- –ò–∑–±–µ–≥–∞–π—Ç–µ –±–ª–∏–∫–æ–≤ –∏ —Ç–µ–Ω–µ–π",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(OrderStates.barcode_scan)

@dp.message(OrderStates.article_input, F.text == "‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
async def handle_manual_choice(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –≤—Ä—É—á–Ω—É—é:", 
                        reply_markup=article_input_keyboard())

@dp.message(OrderStates.article_input)
async def process_article_manual(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞"""
    article = message.text.strip()
    
    if not re.match(r'^\d{4,10}$', article):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ç–∏–∫—É–ª–∞. –ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 4-10 —Ü–∏—Ñ—Ä.")
        return
        
    await state.update_data(article=article)
    await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:", 
                        reply_markup=shop_selection_keyboard())
    await state.set_state(OrderStates.shop_selection)

@dp.message(OrderStates.barcode_scan, F.photo)
async def handle_barcode_scan(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞"""
    try:
        processing_msg = await message.answer("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        photo = message.photo[-1]
        article, error = await process_barcode_image(photo)
        await processing_msg.delete()
        
        if error:
            await message.answer(f"‚ùå {error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –≤—Ä—É—á–Ω—É—é.",
                                reply_markup=article_input_keyboard())
            await state.set_state(OrderStates.article_input)
            return
            
        await state.update_data(article=article)
        await message.answer(f"‚úÖ –®—Ç—Ä–∏—Ö-–∫–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n–ê—Ä—Ç–∏–∫—É–ª: {article}")
        await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:", 
                            reply_markup=shop_selection_keyboard())
        await state.set_state(OrderStates.shop_selection)
        
    except Exception as e:
        logging.exception("Barcode scan error")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", 
                            reply_markup=article_input_keyboard())
        await state.set_state(OrderStates.article_input)

@dp.message(OrderStates.shop_selection)
async def process_shop_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    user_data = await get_user_data(str(message.from_user.id))
    
    if message.text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–π –º–∞–≥–∞–∑–∏–Ω":
        selected_shop = user_data['shop']
    elif message.text == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π":
        await message.answer("üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π):")
        await state.set_state(OrderStates.shop_input)
        return
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é",
                            reply_markup=shop_selection_keyboard())
        return
    
    await state.update_data(selected_shop=selected_shop)
    await continue_order_process(message, state)

@dp.message(OrderStates.shop_input)
async def process_custom_shop(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    shop = message.text.strip()
    if not shop.isdigit() or shop.startswith('0'):
        await message.answer("‚ùó –ù–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –±–µ–∑ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    await state.update_data(selected_shop=shop)
    await continue_order_process(message, state)

async def continue_order_process(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    data = await state.get_data()
    article = data.get('article')
    selected_shop = data.get('selected_shop')
    
    await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...")
    product_info = await get_product_info(article, selected_shop)
    
    if not product_info:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ")
        await state.clear()
        return
        
    response = (
        f"–ú–∞–≥–∞–∑–∏–Ω: {selected_shop}\n"
        f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {product_info['–ê—Ä—Ç–∏–∫—É–ª']}\n"
        f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
        f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {product_info['–ü–æ—Å—Ç–∞–≤—â–∏–∫']}\n" 
        f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {product_info['–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞']}\n"
        f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {product_info['–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏']}\n"
    )
    
    await state.update_data(
        product_name=product_info['–ù–∞–∑–≤–∞–Ω–∏–µ'],
        department=product_info['–û—Ç–¥–µ–ª'],
        supplier_name=product_info['–ü–æ—Å—Ç–∞–≤—â–∏–∫']
    )
    
    await message.answer(response)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", 
                        reply_markup=cancel_keyboard())
    await state.set_state(OrderStates.quantity_input)

@dp.message(OrderStates.quantity_input)
async def process_quantity(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    quantity = message.text.strip()
    
    if not quantity.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=cancel_keyboard())
        return
        
    await state.update_data(quantity=int(quantity))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—É:", 
                        reply_markup=cancel_keyboard())
    await state.set_state(OrderStates.order_reason_input)

@dp.message(OrderStates.order_reason_input)
async def process_order_reason(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –∑–∞–∫–∞–∑–∞"""
    reason = message.text.strip()
    await state.update_data(order_reason=reason)
    
    data = await state.get_data()
    selected_shop = data.get('selected_shop')
    
    response = (
        "üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {selected_shop}\n"
        f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {data['article']}\n"
        f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {data['product_name']}\n"
        f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {data['supplier_name']}\n" 
        f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {data['order_date']}\n"
        f"üöö –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_date']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞/–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
    )
    
    await message.answer(response, reply_markup=confirm_keyboard())
    await state.set_state(OrderStates.confirmation)

@dp.message(OrderStates.confirmation, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def final_confirmation(message: types.Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    await state.update_data(last_activity=datetime.now().isoformat())
    data = await state.get_data()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['selected_shop', 'article', 'order_reason', 'quantity', 'department']
        for field in required_fields:
            if field not in data:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç –æ—Ç–¥–µ–ª–∞
        department_sheet = orders_spreadsheet.worksheet(data['department'])
        next_row = len(department_sheet.col_values(1)) + 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updates = [
            {'range': f'A{next_row}', 'values': [[data['selected_shop']]},
            {'range': f'B{next_row}', 'values': [[int(data['article'])]]},
            {'range': f'C{next_row}', 'values': [[data['order_reason']]]},
            {'range': f'D{next_row}', 'values': [[datetime.now().strftime("%d.%m.%Y %H:%M")]]},
            {'range': f'E{next_row}', 'values': [[f"{data['user_name']}, {data['user_position']}"]]},
            {'range': f'K{next_row}', 'values': [[int(data['quantity'])]]},
            {'range': f'R{next_row}', 'values': [[int(message.from_user.id)]]}
        ]

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        department_sheet.batch_update(updates)
        await message.answer("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", 
                            reply_markup=main_menu_keyboard(message.from_user.id))
        await log_user_activity(message.from_user.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", "confirmation")
        await state.clear()

    except Exception as e:
        await log_error(message.from_user.id, f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {str(e)}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

@dp.message(OrderStates.confirmation, F.text == "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
async def correct_quantity(message: types.Message, state: FSMContext):
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", 
                        reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderStates.quantity_input)

# –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
@dp.message(F.text == "üìã –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
async def handle_info_request(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    await state.update_data(last_activity=datetime.now().isoformat())
    await log_user_activity(message.from_user.id, "–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "info")
    
    user_data = await get_user_data(str(message.from_user.id))
    if not user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
        
    await state.update_data(shop=user_data['shop'])
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:", 
                        reply_markup=article_input_keyboard())
    await state.set_state(InfoRequest.article_input)

@dp.message(InfoRequest.article_input)
async def process_info_request(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    if message.photo:
        photo = message.photo[-1]
        article, error = await process_barcode_image(photo)
        
        if error:
            await message.answer(error)
            return
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        article = message.text.strip()
        if not re.match(r'^\d{4,10}$', article):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ç–∏–∫—É–ª–∞.")
            return
    
    data = await state.get_data()
    user_shop = data['shop']
    product_info = await get_product_info(article, user_shop)
    
    if not product_info:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    response = (
        f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {user_shop}\n"
        f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {product_info['–ê—Ä—Ç–∏–∫—É–ª']}\n"
        f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
        f"üî¢ –û—Ç–¥–µ–ª: {product_info['–û—Ç–¥–µ–ª']}\n"
        f"üìÖ –ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {product_info['–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞']}\n"
        f"üöö –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {product_info['–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏']}\n"
        f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {product_info['–ü–æ—Å—Ç–∞–≤—â–∏–∫']}" 
    )
    
    await message.answer(response, reply_markup=main_menu_keyboard(message.from_user.id))
    await state.clear()

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
@dp.message(F.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def handle_admin_panel(message: types.Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await message.answer("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", 
                        reply_markup=admin_panel_keyboard())

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_admin_stats(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    if message.from_user.id not in ADMINS:
        return
    
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        users_data = pickle.loads(cache.get("users_data", b"[]"))
        users_count = len(users_data) if users_data else 0
        
        stats_data = pickle.loads(cache.get("stats_data", b"[]"))
        orders_count = sum(1 for r in stats_data if len(r) > 8 and r[8] == 'order')
        
        cpu_usage = psutil.cpu_percent()
        memory_usage = psutil.virtual_memory().percent
        
        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ: {orders_count}\n"
            f"‚Ä¢ –õ–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π: {len(stats_data)}\n\n"
            f"‚öôÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:\n"
            f"‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_usage}%\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {memory_usage}%\n"
            f"‚Ä¢ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º: {'–í–ö–õ' if SERVICE_MODE else '–í–´–ö–õ'}"
        )
        await message.answer(response, reply_markup=admin_panel_keyboard())
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=admin_panel_keyboard())

@dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def handle_broadcast_menu(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.from_user.id not in ADMINS:
        return
    
    await message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", 
                        reply_markup=cancel_keyboard())
    await state.set_state(AdminBroadcast.message_input)

@dp.message(AdminBroadcast.message_input)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await state.update_data(message=message.html_text)
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:", 
                        reply_markup=create_keyboard(
                            ["–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", "–ü–æ –º–∞–≥–∞–∑–∏–Ω–∞–º", "–ü–æ –æ—Ç–¥–µ–ª–∞–º", "–í—Ä—É—á–Ω—É—é", "‚ùå –û—Ç–º–µ–Ω–∞"],
                            (2, 2, 1)
                        ))
    await state.set_state(AdminBroadcast.target_selection)

@dp.message(AdminBroadcast.target_selection, F.text == "–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
async def handle_broadcast_all(message: types.Message, state: FSMContext):
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    data = await state.get_data()
    users = [str(user['ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']) for user in pickle.loads(cache.get("users_data", b"[]"))]
    await send_broadcast(data['message'], users)
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
                        reply_markup=admin_panel_keyboard())
    await state.clear()

async def send_broadcast(message_text: str, user_ids: list) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    success, failed = 0, 0
    
    for user_id in user_ids:
        try:
            if not user_id.strip():
                continue
                
            await bot.send_message(int(user_id), message_text)
            success += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            failed += 1
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}: {str(e)}")
    
    await bot.send_message(
        ADMINS[0],
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )

@dp.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à")
async def handle_cache_refresh(message: types.Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞"""
    if message.from_user.id not in ADMINS:
        return
    
    try:
        cache.clear()
        await preload_cache()
        await message.answer("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", 
                            reply_markup=admin_panel_keyboard())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {str(e)}", 
                            reply_markup=admin_panel_keyboard())

@dp.message(F.text == "üîß –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º")
async def handle_service_mode_menu(message: types.Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–º —Ä–µ–∂–∏–º–æ–º"""
    if message.from_user.id not in ADMINS:
        return
    
    status = "üü¢ –í–ö–õ–Æ–ß–ï–ù" if SERVICE_MODE else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù"
    await message.answer(
        f"üõ† –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {status}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=service_mode_keyboard()
    )

@dp.message(F.text == "üü¢ –í–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º")
async def enable_service_mode(message: types.Message):
    """–í–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    if message.from_user.id not in ADMINS:
        return
    
    global SERVICE_MODE
    SERVICE_MODE = True
    await message.answer("‚úÖ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω", 
                        reply_markup=admin_panel_keyboard())

@dp.message(F.text == "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º")
async def disable_service_mode(message: types.Message):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    if message.from_user.id not in ADMINS:
        return
    
    global SERVICE_MODE
    SERVICE_MODE = False
    await message.answer("‚úÖ –°–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω", 
                        reply_markup=admin_panel_keyboard())

# ===================== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====================
async def scheduled_cache_update():
    """–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞"""
    while True:
        await asyncio.sleep(3600 * 12)  # –ö–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
        try:
            await preload_cache()
            logging.info("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {str(e)}")

async def startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logging.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:  
        await preload_cache()
        asyncio.create_task(scheduled_cache_update())
        logging.info("‚úÖ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")
    except Exception as e:
        logging.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
        raise

async def shutdown():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    try:
        await bot.session.close()
        await dp.storage.close()
        logging.info("‚úÖ –†–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {str(e)}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    await startup()
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        asyncio.run(shutdown())
